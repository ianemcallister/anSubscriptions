config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("ansub",["ngRoute","ui.bootstrap"]);function mainController(e,t,n,r,s){e.userData=r,e.state=s}function successController(e,t,n){e.confirmationCode=n.confirmationCode,console.log("success controler",n.confirmationCode,e.confirmationCode)}function billingAddress(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/billingAddress.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}function n(e,t,n,r){this.userData=n,this.state=r}return n.$inject=["$scope","$log","userDataService","stateService"],e}function billingInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/billingInput.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}function n(r,s,e,t,n){var o=this;o.userData=e,o.state=t,n.get.sqrAppId().then(function(e){o.paymentForm=new SqPaymentForm({applicationId:e.id,inputClass:"sq-input",inputStyles:[{fontSize:"14px",padding:"7px 12px",backgroundColor:"transparent"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},callbacks:{cardNonceResponseReceived:function(e,t,n){e?(s.info("Encountered errors:",e),o.card_errors=e,o.isProcessing=!1,r.$apply()):(o.card_errors=[],o.chargeCardWithNonce(t))},unsupportedBrowserDetected:function(){},inputEventReceived:function(e){e.eventType},paymentFormLoaded:function(){}}}),o.paymentForm.build()}).catch(function(e){s.info(e)})}return n.$inject=["$scope","$log","userDataService","stateService","serverService"],e}function contactInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/contactInput.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}function n(e,t,n,r){this.userData=n,this.state=r}return n.$inject=["$scope","$log","userDataService","stateService"],e}function frequencySelection(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/frequencySelection.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}function n(e,t){this.frequencies=["month","quarter","year"],this.starts={month:["January","February","March","April","May","June","July","August","September","October","November","December"],quarter:["Winter","Spring","Summer","Fall"],year:["2018","2019","2020"]},this.selectedFrequency="",this.startsIn=""}return n.$inject=["$scope","$log"],e}function productSelection(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/productSelection.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}function n(e,t,n,r){var s=this;s.userData=n,s.state=r.productSelection,s.state.infoBox=r.infoBoxes.flavorDefs,s.orderList=n.order,s.productPrice=17;var o={id:1,flavor:"",mixflvrCount:0,mixflvrs:{srpec:{id:"srpec",name:"Secret Recipe Pecans",selected:!(s.order={discounts:0,shipping:0,total:0}),classes:{"list-group-item":!0,active:!1}},sralm:{id:"sralm",name:"Secret Recipe Almonds",selected:!1,classes:{"list-group-item":!0,active:!1}},srcsh:{id:"srcsh",name:"Secret Recipe Cashews",selected:!1,classes:{"list-group-item":!0,active:!1}},srpea:{id:"srpea",name:"Secret Recipe Peanuts",selected:!1,classes:{"list-group-item":!0,active:!1}},cnpec:{id:"cnpec",name:"Cinnamon Pecans",selected:!1,classes:{"list-group-item":!0,active:!1}},cnalm:{id:"cnalm",name:"Cinnamon Almonds",selected:!1,classes:{"list-group-item":!0,active:!1}},drpec:{id:"drpec",name:"Drunken Pecans",selected:!1,classes:{"list-group-item":!0,active:!1}}}};function i(){s.order.total=s.orderList.length*s.productPrice-s.order.discounts,4==s.orderList.length&&(s.order.total=s.order.total-s.productPrice)}s.flavors=[{name:"Secret Recipe Pecans",description:"Sweet and Salty"},{name:"Secret Recipe Almonds",description:"Sweet and Salty"},{name:"Secret Recipe Cashews",description:"Sweet and Salty"},{name:"Secret Recipe Peanuts",description:"Sweet and Salty"},{name:"Cinnamon Pecans",description:"Bavarian"},{name:"Cinnamon Almonds",description:"Bavarian"},{name:"Drunken Pecans",description:"Savory"},{name:"Mix-It-Up",description:"Whatever You Like"}],s.addAProduct=function(){var e=s.orderList.length;e<4&&s.orderList.push(Object.create(o)),3==e&&(s.state.addAProductBtn.visible=!1),0<e&&(s.state.removeLastProductBtn.visible=!0);for(var t=0;t<=e;t++)s.orderList[t].id=t+1;i()},s.removeLastProduct=function(){var e=s.orderList.length,t=e-1;1<e&&s.orderList.splice(t,1),2==e&&(s.state.removeLastProductBtn.visible=!1),s.state.addAProductBtn.visible=!0,4==e&&(s.order.discounts=0),i()},s.removeAProduct=function(e){var t=e-1;1<s.orderList.length&&s.orderList.splice(t,1);for(var n=0;n<=s.orderList.length-1;n++)s.orderList[n].id=n+1;i()},s.validateProducts=function(){},s.countMixFlavors=function(t){var n=0;return Object.keys(t).forEach(function(e){t[e].selected&&n++}),n},s.updateShoppingCart=function(){console.log("updating shopping cart")},s.orderList.push(Object.create(o)),i()}return n.$inject=["$scope","$log","userDataService","stateService"],e}function shipDest(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",template:"<div>testing</div>",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}function n(e,t,n){this.zipCheck=n}return n.$inject=["$scope","$log","zipcomplete"],e}function singleAddressInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/singleAddressInput.htm",replace:!0,scope:{address:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}function n(e,t,n,r){var s=this;s.userData=n,s.state=r,s.updateBillingAddress=function(){s.state.shipingSameAsBilling&&(s.userData.billingAddress.street=s.userData.shippingDestination.street,s.userData.billingAddress.zip=s.userData.shippingDestination.zip,s.userData.billingAddress.city=s.userData.shippingDestination.city,s.userData.billingAddress.state=s.userData.shippingDestination.state)}}return n.$inject=["$scope","$log","userDataService","stateService"],e}function subTermsCond(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/subTermsCond.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}function n(n,e,r,t,s,o,i){var c=this;c.state=t,c.userData=s,c.validate=o,c.submit=function(){console.log("submittig the form"),i.submit(c.userData).then(function(e){var t="/success/"+e.data;console.log("got this path back",t),r.path(t),n.$apply()}).catch(function(e){console.log("there was an error",e)})}}return n.$inject=["$scope","$log","$location","stateService","userDataService","validationService","submissionService"],e}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/monthlySub.htm",controller:"mainController",controllerAs:"vm"}).when("/success/:confirmationCode",{templateUrl:"views/success.htm",controller:"successController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function errorHandlingService(){return{}}function modalService(e){var s={backdrop:!0,keyboard:!0,modalFade:!0,templateUrl:"partials/modal.htm"},o={closeButtonText:"Close",actionButtonText:"OK",headerText:"Proceed?",bodyText:"Perform this action?"};this.showModal=function(e,t){return e||(e={}),e.backdrop="static",this.show(e,t)},this.show=function(e,t){var n={},r={};return angular.extend(n,s,e),angular.extend(r,o,t),n.controller||(n.controller=function(e,t){e.modalOptions=r,e.modalOptions.ok=function(e){t.close(e)},e.modalOptions.close=function(e){t.dismiss("cancel")}}),$modal.open(n).result}}function serverService(e){return{get:{sqrAppId:function(){return new Promise(function(t,n){e({method:"GET",url:"/api/squareId"}).then(function(e){console.log("got this response",e),t(e.data)},function(e){n(e)})})}}}}function stateService(e){return{shipingSameAsBilling:!0,productSelection:{addAProductBtn:{classes:{btn:!0,"btn-success":!0,"btn-warning":!1},visible:!0},removeLastProductBtn:{classes:{btn:!0,"btn-success":!1,"btn-warning":!1,"btn-danger":!0},visible:!1},headerStyle:{color:"rgb(51,51,51)"}},contactInfo:{firstname:{classes:{"form-control":!0,"is-valid":!1,"is-invalid":!1},addressed:!1,isValid:!1,isInvalid:!1}},infoBoxes:{flavorDefs:!1,termsConds:!1},sectionsAddressed:{productSelection:!1,singleShippingAddress:!1,contactInfo:!1,termsConds:!1},sectionsCompleted:{productSelection:!0,singleShippingAddress:!0,contactInfo:!0,termsConds:!1},sectionHeaders:{productSelection:{showError:!1,showCompleted:!1},singleShippingAddress:{showError:!1,showCompleted:!1},contactInfo:{showError:!1,showCompleted:!1},termsConds:{showError:!1,showCompleted:!1}},checkCompletness:function(){var t=this,n=!0;Object.keys(t.sectionsCompleted).forEach(function(e){0==t.sectionsCompleted[e]&&(n=!1)}),t.submissionBtn["btn-secondary"]=n?(readyForSubmission=!0,t.submissionBtn["btn-success"]=!0,!1):(readyForSubmission=!1,t.submissionBtn["btn-success"]=!1,!0)},readyForSubmission:!1,submissionBtn:{btn:!0,"btn-block":!0,"btn-success":!1,"btn-secondary":!0}}}function submissionService(r){this.submit=function(e){return new Promise(function(t,n){r({method:"POST",url:"/subscription-application-submission",headers:{"Content-Type":"application/json"},data:e}).then(function(e){console.log("got this response",e),t(e)},function(e){n(e)})})}}function userDataService(){return{name:{first:"",last:""},contact:{email:"",phone:""},shippingDestination:{street:"",city:"",state:"",zip:""},billingAddress:{street:"",cit:"",state:"",zip:""},card:{card_number:"",cvv:"",expiration_date:"",postal_code:""},order:[],agreedToTerms:!1}}function validationService(e,t){return{termsAndCond:function(){console.log("validating terms and conditions"),e.sectionsAddressed.termsConds=!0,e.sectionsCompleted.termsConds=t.agreedToTerms,e.sectionsCompleted.termsConds?(e.sectionHeaders.termsConds.showError=!1,e.sectionHeaders.termsConds.showCompleted=!0):(e.sectionHeaders.termsConds.showError=!0,e.sectionHeaders.termsConds.showCompleted=!1)}}}function zipcomplete(){this.handleResp=function(e){e.error_msg?console.log(e.error_msg):"city"in e&&(container.find("input[name='city']").val(e.city),container.find("input[name='state']").val(e.state))},this.checkZip=function(e){var t=e.substring(0,5);5==t.length&&/^[0-9]+$/.test(t)&&console.log("checking zip",t)}}angular.module("ansub").controller("mainController",mainController),mainController.$inject=["$scope","$log","submissionService","userDataService","stateService"],angular.module("ansub").controller("successController",successController),successController.$inject=["$scope","$log","$routeParams"],angular.module("ansub").directive("billingAddress",billingAddress),angular.module("ansub").directive("billingInput",billingInput),angular.module("ansub").directive("contactInput",contactInput),angular.module("ansub").directive("frequencySelection",frequencySelection),angular.module("ansub").directive("productSelection",productSelection),angular.module("ansub").directive("shipDest",shipDest),angular.module("ansub").directive("singleAddressInput",singleAddressInput),angular.module("ansub").directive("subTermsCond",subTermsCond),angular.module("ansub").config(config),angular.module("ansub").service("errorHandlingService",errorHandlingService),errorHandlingService.$inject=[],angular.module("ansub").service("modalService",modalService),modalService.$inject=["$uibModal"],angular.module("ansub").service("serverService",serverService),serverService.$inject=["$http"],angular.module("ansub").service("stateService",stateService),stateService.$inject=["userDataService"],angular.module("ansub").service("submissionService",submissionService),submissionService.$inject=["$http"],angular.module("ansub").service("userDataService",userDataService),userDataService.$inject=[],angular.module("ansub").service("validationService",validationService),validationService.$inject=["stateService","userDataService"],angular.module("ansub").service("zipcomplete",zipcomplete),zipcomplete.$inject=[];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvd2ViYXBwLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9tYWluLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3N1Y2Nlc3MuY29udHJvbGxlci5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9iaWxsaW5nQWRkcmVzcy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvYmlsbGluZ0lucHV0LmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jb250YWN0SW5wdXQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2ZyZXF1ZW5jeVNlbGVjdGlvbi5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcHJvZHVjdFNlbGVjdGlvbi5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2hpcERlc3QuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NpbmdsZUFkZHJlc3NJbnB1dC5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc3VidGVybXNjb25kLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvcm91dGVzL3JvdXRlcy5jb25maWcuanMiLCJzY3JpcHRzL3NlcnZpY2VzL2Vycm9ySGFuZGxpbmcuc2VydmljZS5qcyIsInNjcmlwdHMvc2VydmljZXMvbW9yZGFscy5zZXJ2aWNlLmpzIiwic2NyaXB0cy9zZXJ2aWNlcy9zZXJ2ZXIuc2VydmljZS5qcyIsInNjcmlwdHMvc2VydmljZXMvc3RhdGUuc2VydmljZS5qcyIsInNjcmlwdHMvc2VydmljZXMvc3VibWlzc2lvblNlcml2Y2Uuc2VydmljZS5qcyIsInNjcmlwdHMvc2VydmljZXMvdXNlckRhdGEuc2VydmljZS5qcyIsInNjcmlwdHMvc2VydmljZXMvdmFsaWRhdGlvbi5zZXJ2aWNlLmpzIiwic2NyaXB0cy9zZXJ2aWNlcy96aXBjb21wbGV0ZS5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFoTnV0cyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJtYWluQ29udHJvbGxlciIsIiRzY29wZSIsIiRsb2ciLCJzdWJtaXNzaW9uU2VydmljZSIsInVzZXJEYXRhU2VydmljZSIsInN0YXRlU2VydmljZSIsInVzZXJEYXRhIiwic3RhdGUiLCJzdWNjZXNzQ29udHJvbGxlciIsIiRyb3V0ZVBhcmFtcyIsImNvbmZpcm1hdGlvbkNvZGUiLCJjb25zb2xlIiwibG9nIiwiYmlsbGluZ0FkZHJlc3MiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInRlbXBsYXRlVXJsIiwicmVwbGFjZSIsInNjb3BlIiwibGluayIsImxpbmtGdW5jIiwiY29udHJvbGxlciIsImJpbGxpbmdBZGRyZXNzQ29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCJlbCIsImF0dHIiLCJjdHJsIiwidGhpcyIsIiRpbmplY3QiLCJiaWxsaW5nSW5wdXQiLCJiaWxsaW5nSW5wdXRDb250cm9sbGVyIiwic2VydmVyU2VydmljZSIsInZtIiwiZ2V0Iiwic3FyQXBwSWQiLCJ0aGVuIiwic3FBcHAiLCJwYXltZW50Rm9ybSIsIlNxUGF5bWVudEZvcm0iLCJhcHBsaWNhdGlvbklkIiwiaWQiLCJpbnB1dENsYXNzIiwiaW5wdXRTdHlsZXMiLCJmb250U2l6ZSIsInBhZGRpbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJjYXJkTnVtYmVyIiwiZWxlbWVudElkIiwicGxhY2Vob2xkZXIiLCJjdnYiLCJleHBpcmF0aW9uRGF0ZSIsInBvc3RhbENvZGUiLCJjYWxsYmFja3MiLCJjYXJkTm9uY2VSZXNwb25zZVJlY2VpdmVkIiwiZXJyb3JzIiwibm9uY2UiLCJjYXJkRGF0YSIsImluZm8iLCJjYXJkX2Vycm9ycyIsImlzUHJvY2Vzc2luZyIsIiRhcHBseSIsImNoYXJnZUNhcmRXaXRoTm9uY2UiLCJ1bnN1cHBvcnRlZEJyb3dzZXJEZXRlY3RlZCIsImlucHV0RXZlbnRSZWNlaXZlZCIsImlucHV0RXZlbnQiLCJldmVudFR5cGUiLCJwYXltZW50Rm9ybUxvYWRlZCIsImJ1aWxkIiwiY2F0Y2giLCJlcnJvciIsImNvbnRhY3RJbnB1dCIsImNvbnRhY3RJbnB1dHRDb250cm9sbGVyIiwiZnJlcXVlbmN5U2VsZWN0aW9uIiwiZnJlcXVlbmN5U2VsZWN0aW9uQ29udHJvbGxlciIsImZyZXF1ZW5jaWVzIiwic3RhcnRzIiwibW9udGgiLCJxdWFydGVyIiwieWVhciIsInNlbGVjdGVkRnJlcXVlbmN5Iiwic3RhcnRzSW4iLCJwcm9kdWN0U2VsZWN0aW9uIiwicHJvZHVjdFNlbGVjdGlvbkNvbnRyb2xsZXIiLCJzZWxmIiwiaW5mb0JveGVzIiwiZmxhdm9yRGVmcyIsIm9yZGVyTGlzdCIsIm9yZGVyIiwicHJvZHVjdFByaWNlIiwicHJvZHVjdE9iamVjdCIsImZsYXZvciIsIm1peGZsdnJDb3VudCIsIm1peGZsdnJzIiwic3JwZWMiLCJuYW1lIiwic2VsZWN0ZWQiLCJkaXNjb3VudHMiLCJzaGlwcGluZyIsInRvdGFsIiwiY2xhc3NlcyIsImxpc3QtZ3JvdXAtaXRlbSIsImFjdGl2ZSIsInNyYWxtIiwic3Jjc2giLCJzcnBlYSIsImNucGVjIiwiY25hbG0iLCJkcnBlYyIsInN1bU9yZGVyIiwibGVuZ3RoIiwiZmxhdm9ycyIsImRlc2NyaXB0aW9uIiwiYWRkQVByb2R1Y3QiLCJub09mUHJvZHVjdHMiLCJwdXNoIiwiT2JqZWN0IiwiY3JlYXRlIiwiYWRkQVByb2R1Y3RCdG4iLCJ2aXNpYmxlIiwicmVtb3ZlTGFzdFByb2R1Y3RCdG4iLCJpIiwicmVtb3ZlTGFzdFByb2R1Y3QiLCJyZW1vdmVJbmRleCIsInNwbGljZSIsInJlbW92ZUFQcm9kdWN0IiwidmFsaWRhdGVQcm9kdWN0cyIsImNvdW50TWl4Rmxhdm9ycyIsImZsYXZvck9iamVjdCIsImNvdW50ZXIiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInVwZGF0ZVNob3BwaW5nQ2FydCIsInNoaXBEZXN0IiwidGVtcGxhdGUiLCJzaGlwRGVzdENvbnRyb2xsZXIiLCJ6aXBjb21wbGV0ZSIsInppcENoZWNrIiwic2luZ2xlQWRkcmVzc0lucHV0IiwiYWRkcmVzcyIsInNpbmdsZUFkZHJlc3NJbnB1dENvbnRyb2xsZXIiLCJ1cGRhdGVCaWxsaW5nQWRkcmVzcyIsInNoaXBpbmdTYW1lQXNCaWxsaW5nIiwic3RyZWV0Iiwic2hpcHBpbmdEZXN0aW5hdGlvbiIsInppcCIsImNpdHkiLCJzdWJUZXJtc0NvbmQiLCJzdWJUZXJtc0NvbmRDb250cm9sbGVyIiwiJGxvY2F0aW9uIiwidmFsaWRhdGlvblNlcnZpY2UiLCJ2YWxpZGF0ZSIsInN1Ym1pdCIsInMiLCJuZXdQYXRoIiwiZGF0YSIsInBhdGgiLCJlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsImhhc2hQcmVmaXgiLCJ3aGVuIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsImVycm9ySGFuZGxpbmdTZXJ2aWNlIiwibW9kYWxTZXJ2aWNlIiwiJHVpYk1vZGFsIiwibW9kYWxEZWZhdWx0cyIsImJhY2tkcm9wIiwia2V5Ym9hcmQiLCJtb2RhbEZhZGUiLCJtb2RhbE9wdGlvbnMiLCJjbG9zZUJ1dHRvblRleHQiLCJhY3Rpb25CdXR0b25UZXh0IiwiaGVhZGVyVGV4dCIsImJvZHlUZXh0Iiwic2hvd01vZGFsIiwiY3VzdG9tTW9kYWxEZWZhdWx0cyIsImN1c3RvbU1vZGFsT3B0aW9ucyIsInNob3ciLCJ0ZW1wTW9kYWxEZWZhdWx0cyIsInRlbXBNb2RhbE9wdGlvbnMiLCJleHRlbmQiLCIkbW9kYWxJbnN0YW5jZSIsIm9rIiwicmVzdWx0IiwiY2xvc2UiLCJkaXNtaXNzIiwiJG1vZGFsIiwib3BlbiIsIiRodHRwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJtZXRob2QiLCJ1cmwiLCJyZXNwb25zZSIsImJ0biIsImJ0bi1zdWNjZXNzIiwiYnRuLXdhcm5pbmciLCJidG4tZGFuZ2VyIiwiaGVhZGVyU3R5bGUiLCJjb2xvciIsImNvbnRhY3RJbmZvIiwiZmlyc3RuYW1lIiwiZm9ybS1jb250cm9sIiwiaXMtdmFsaWQiLCJpcy1pbnZhbGlkIiwiYWRkcmVzc2VkIiwiaXNWYWxpZCIsImlzSW52YWxpZCIsInRlcm1zQ29uZHMiLCJzZWN0aW9uc0FkZHJlc3NlZCIsInNpbmdsZVNoaXBwaW5nQWRkcmVzcyIsInNlY3Rpb25zQ29tcGxldGVkIiwic2VjdGlvbkhlYWRlcnMiLCJzaG93RXJyb3IiLCJzaG93Q29tcGxldGVkIiwiY2hlY2tDb21wbGV0bmVzcyIsIm5vRmxhZ3MiLCJzdWJtaXNzaW9uQnRuIiwicmVhZHlGb3JTdWJtaXNzaW9uIiwiYnRuLWJsb2NrIiwiYnRuLXNlY29uZGFyeSIsImhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJmaXJzdCIsImxhc3QiLCJjb250YWN0IiwiZW1haWwiLCJwaG9uZSIsImNpdCIsImNhcmQiLCJjYXJkX251bWJlciIsImV4cGlyYXRpb25fZGF0ZSIsInBvc3RhbF9jb2RlIiwiYWdyZWVkVG9UZXJtcyIsInRlcm1zQW5kQ29uZCIsImhhbmRsZVJlc3AiLCJlcnJvcl9tc2ciLCJjb250YWluZXIiLCJmaW5kIiwidmFsIiwiY2hlY2taaXAiLCJlbnRlcmVkWmlwIiwiemlwY29kZSIsInN1YnN0cmluZyIsInRlc3QiLCJzZXJ2aWNlIl0sIm1hcHBpbmdzIjoic0RBRUEsSUFBQUEsT0FBQUMsUUFBQUMsT0FBQSxRQUFBLENBQUEsVUFBQSxpQkNHQSxTQUFBQyxlQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQW9GQUosRUFBQUssU0FBQUYsRUFDQUgsRUFBQU0sTUFBQUYsRUNyRkEsU0FBQUcsa0JBQUFQLEVBQUFDLEVBQUFPLEdBSUFSLEVBQUFTLGlCQUFBRCxFQUFBQyxpQkFHQUMsUUFBQUMsSUFBQSxvQkFBQUgsRUFBQUMsaUJBQUFULEVBQUFTLGtCQ1RBLFNBQUFHLHdEQUVBLElBQUFDLEVBQUEsQ0FDQUMsU0FBQSxPQUNBQyxZQUFBLDJCQUNBQyxTQUFBLEVBQ0FDLE1BQUEsR0FDQUMsS0FBQUMsRUFDQUMsV0FBQUMsRUFDQUMsYUFBQSxLQUNBQyxrQkFBQSxHQUlBLFNBQUFKLEVB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VUFBQSxxQkFBQTZILG9CQ0FBN0ksUUFBQUMsT0FBQSxTQUFBZSxVQUFBLGVBQUFzSSxjQ0tBdEosUUFDQUMsT0FBQSxTQUNBZ0ssT0FBQUEsUUNQQWpLLFFBQUFDLE9BQUEsU0FBQTJQLFFBQUEsdUJBQUFwRixzQkFHQUEscUJBQUF6SSxRQUFBLEdDSEEvQixRQUFBQyxPQUFBLFNBQUEyUCxRQUFBLGVBQUFuRixjQUdBQSxhQUFBMUksUUFBQSxDQUFBLGFDSEEvQixRQUFBQyxPQUFBLFNBQUEyUCxRQUFBLGdCQUFBMU4sZUFHQUEsY0FBQUgsUUFBQSxDQUFBLFNDSEEvQixRQUFBQyxPQUFBLFNBQUEyUCxRQUFBLGVBQUFyUCxjQUdBQSxhQUFBd0IsUUFBQSxDQUFBLG1CQ0hBL0IsUUFBQUMsT0FBQSxTQUFBMlAsUUFBQSxvQkFBQXZQLG1CQUdBQSxrQkFBQTBCLFFBQUEsQ0FBQSxTQ0hBL0IsUUFBQUMsT0FBQSxTQUFBMlAsUUFBQSxrQkFBQXRQLGlCQUdBQSxnQkFBQXlCLFFBQUEsR0NIQS9CLFFBQUFDLE9BQUEsU0FBQTJQLFFBQUEsb0JBQUFuRyxtQkFHQUEsa0JBQUExSCxRQUFBLENBQUEsZUFBQSxtQkNIQS9CLFFBQUFDLE9BQUEsU0FBQTJQLFFBQUEsY0FBQWpILGFBR0FBLFlBQUE1RyxRQUFBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vZGVmaW5lIHRoZSBtb2R1bGVcblxudmFyIGFoTnV0cyA9IGFuZ3VsYXIubW9kdWxlKCdhbnN1YicsIFsnbmdSb3V0ZScsICd1aS5ib290c3RyYXAnXSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Fuc3ViJykuY29udHJvbGxlcignbWFpbkNvbnRyb2xsZXInLCBtYWluQ29udHJvbGxlcik7XG5cblx0bWFpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICdzdWJtaXNzaW9uU2VydmljZScsICd1c2VyRGF0YVNlcnZpY2UnLCAnc3RhdGVTZXJ2aWNlJ107XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIG1haW5Db250cm9sbGVyKCRzY29wZSwgJGxvZywgc3VibWlzc2lvblNlcnZpY2UsIHVzZXJEYXRhU2VydmljZSwgc3RhdGVTZXJ2aWNlKSB7XG5cdFx0Ly9ub3RpZnkgcHJvZ3Jlc3NcblxuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdC8qdmFyIHJlY2lwaWFudFByb2ZpbGUgPSB7XG5cdFx0XHRuYW1lOiB7XG5cdFx0XHRcdGZpcnN0OiBcIlwiLFxuXHRcdFx0XHRsYXN0OiBcIlwiXG5cdFx0XHR9LFxuXHRcdFx0YWRkcmVzczoge1xuXHRcdFx0XHRzdHJlZXQxOiBcIlwiLFxuXHRcdFx0XHRzdHJlZXQyOiBcIlwiLFxuXHRcdFx0XHRzdHJlZXQzOiBcIlwiLFxuXHRcdFx0XHRjaXR5OiBcIlwiLFxuXHRcdFx0XHRzdGF0ZTogXCJcIixcblx0XHRcdFx0emlwOiBcIlwiXG5cdFx0XHR9LFxuXHRcdFx0Y29udGFjdDoge30sXG5cdFx0XHRyZWxhdGlvbnNoaXA6IFwiXCJcblx0XHR9O1xuXG5cdFx0dmFyIHNoaXBwaW5nU2NoZWR1bGVzID0ge1xuXHRcdFx0XCJ5ZWFybHlcIjogW1xuXHRcdFx0XHR7IGlkOiAxLCBuYW1lOiBcIlRyZWF0XCIsIHNoaXBEYXk6IFwiXCIsIGJpbGxEYXk6IFwiXCIgfVxuXHRcdFx0XSxcblx0XHRcdFwicXVhcnRlcmx5XCI6IFtcblx0XHRcdFx0eyBpZDogMSwgbmFtZTogXCJXaW50ZXJcIiwgc2hpcERheTogXCJcIiwgYmlsbERheTogXCJcIiB9LFxuXHRcdFx0XHR7IGlkOiAyLCBuYW1lOiBcIlNwcmluZ1wiLCBzaGlwRGF5OiBcIlwiLCBiaWxsRGF5OiBcIlwiIH0sXG5cdFx0XHRcdHsgaWQ6IDMsIG5hbWU6IFwiU3VtbWVyXCIsIHNoaXBEYXk6IFwiXCIsIGJpbGxEYXk6IFwiXCIgfSxcblx0XHRcdFx0eyBpZDogNCwgbmFtZTogXCJGYWxsXCIsIHNoaXBEYXk6IFwiXCIsIGJpbGxEYXk6IFwiXCIgfVxuXHRcdFx0XSxcblx0XHRcdFwibW9udGhseVwiOiBbXG5cdFx0XHRcdHsgaWQ6IDEsIG5hbWU6IFwiSmFudWFyeVwiLCBzaGlwRGF5OiBcIjNyZFwiLCBiaWxsRGF5OiBcIjFzdFwiIH0sXG5cdFx0XHRcdHsgaWQ6IDIsIG5hbWU6IFwiRmVicnVhcnlcIiwgc2hpcERheTogXCIzcmRcIiwgYmlsbERheTogXCIxc3RcIiB9LFxuXHRcdFx0XHR7IGlkOiAzLCBuYW1lOiBcIk1hcmNoXCIsIHNoaXBEYXk6IFwiM3JkXCIsIGJpbGxEYXk6IFwiMXN0XCIgfSxcblx0XHRcdFx0eyBpZDogNCwgbmFtZTogXCJBcHJpbFwiLCBzaGlwRGF5OiBcIjNyZFwiLCBiaWxsRGF5OiBcIjFzdFwiIH0sXG5cdFx0XHRcdHsgaWQ6IDUsIG5hbWU6IFwiTWF5XCIsIHNoaXBEYXk6IFwiM3JkXCIsIGJpbGxEYXk6IFwiMXN0XCIgfSxcblx0XHRcdFx0eyBpZDogNiwgbmFtZTogXCJKdW5lXCIsIHNoaXBEYXk6IFwiM3JkXCIsIGJpbGxEYXk6IFwiMXN0XCIgfSxcblx0XHRcdFx0eyBpZDogNywgbmFtZTogXCJKdWx5XCIsIHNoaXBEYXk6IFwiM3JkXCIsIGJpbGxEYXk6IFwiMXN0XCIgfSxcblx0XHRcdFx0eyBpZDogOCwgbmFtZTogXCJBdWd1c3RcIiwgc2hpcERheTogXCIzcmRcIiwgYmlsbERheTogXCIxc3RcIiB9LFxuXHRcdFx0XHR7IGlkOiA5LCBuYW1lOiBcIlNlcHRlbWJlclwiLCBzaGlwRGF5OiBcIjNyZFwiLCBiaWxsRGF5OiBcIjFzdFwiIH0sXG5cdFx0XHRcdHsgaWQ6IDEwLCBuYW1lOiBcIk9jdG9iZXJcIiwgc2hpcERheTogXCIzcmRcIiwgYmlsbERheTogXCIxc3RcIiB9LFxuXHRcdFx0XHR7IGlkOiAxMSwgbmFtZTogXCJOb3ZlbWJlclwiLCBzaGlwRGF5OiBcIjNyZFwiLCBiaWxsRGF5OiBcIjFzdFwiIH0sXG5cdFx0XHRcdHsgaWQ6IDEyLCBuYW1lOiBcIkRlY2VtYmVyXCIsIHNoaXBEYXk6IFwiM3JkXCIsIGJpbGxEYXk6IFwiMXN0XCIgfVxuXHRcdFx0XSxcblx0XHRcdFwid2Vla2x5XCI6IHdlZWtseUdlbmVyYXRvcigpXG5cblx0XHR9XG5cdFx0XG5cdFx0dmFyIHNoaXBwaW5nT2NjdXJhbmNlID0ge1xuXHRcdFx0aWQ6IDAsXG5cdFx0XHRuYW1lOiBcIlwiLFxuXHRcdFx0ZGF0ZTogXCJcIlxuXHRcdH07XG5cblx0XHRmdW5jdGlvbiB3ZWVrbHlHZW5lcmF0b3IoKSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBhbGxXZWVrcyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGkgPSAxOyBpIDw9IDUyOyBpKyspIHtcblx0XHRcdFx0dmFyIHdlZWtOYW1lID0gXCJXZWVrIFwiICsgaTtcblx0XHRcdFx0YWxsV2Vla3MucHVzaCh7IGlkOiBpLCBuYW1lOiB3ZWVrTmFtZSwgc2hpcERheTogXCJUdWVzZGF5XCIsIGJpbGxEYXk6IFwiRnJpZGF5XCIgfSk7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gYWxsV2Vla3M7XG5cdFx0fTsqL1xuXG5cdFx0Ly9kZWZpbmUgZmxhdm9yIHZhcmlhYmxlc1xuXHRcdC8qJHNjb3BlLmZsYXZvcnM9IFtcblx0XHRcdHsgbmFtZTogJ1NlY3JldCBSZWNpcGUgUGVjYW5zJywgZGVzY3JpcHRpb246IFwiIFwiIH0sXG5cdFx0XHR7IG5hbWU6ICdTZWNyZXQgUmVjaXBlIEFsbW9uZHMnLCBkZXNjcmlwdGlvbjogXCIgXCIgfSxcblx0XHRcdHsgbmFtZTogJ1NlY3JldCBSZWNpcGUgQ2FzaGV3cycsIGRlc2NyaXB0aW9uOiBcIiBcIiB9LFxuXHRcdFx0eyBuYW1lOiAnU2VjcmV0IFJlY2lwZSBQZWFudXRzJywgZGVzY3JpcHRpb246IFwiIFwiIH0sXG5cdFx0XHR7IG5hbWU6ICdDaW5uYW1vbiBQZWNhbnMnLCBkZXNjcmlwdGlvbjogXCIgXCIgfSxcblx0XHRcdHsgbmFtZTogJ0Npbm5hbW9uIEFsbW9uZHMnLCBkZXNjcmlwdGlvbjogXCIgXCIgfSxcblx0XHRcdHsgbmFtZTogJ0RydW5rZW4gUGVjYW5zJywgZGVzY3JpcHRpb246IFwiIFwiIH0sXG5cdFx0XHR7IG5hbWU6ICdNaXgtSXQtVXAnLCBkZXNjcmlwdGlvbjogXCIgXCIgfVxuXHRcdF07XG5cblx0XHQkc2NvcGUub3JkZXJTY2hlZHVsZSA9IFtcblx0XHRcdHsgaWQ6IDEgfVxuXHRcdF07Ki9cblxuXHRcdC8vZGVmaW5lIHVzZXJkYXRhIG1vZGVsIHZhcmlhYmxlXG5cdFx0JHNjb3BlLnVzZXJEYXRhID0gdXNlckRhdGFTZXJ2aWNlO1xuXHRcdCRzY29wZS5zdGF0ZSA9IHN0YXRlU2VydmljZTtcblxuXHRcdC8vZGVmaW5lIHN0YXRlIHZhcmlhYmxlc1xuXHRcdC8qJHNjb3BlLnN0YXRlID0ge1xuXHRcdFx0dGVtcFJlY2lwaWFudDoge1xuXHRcdFx0XHRuYW1lOiB7XG5cdFx0XHRcdFx0Zmlyc3Q6IFwiXCIsXG5cdFx0XHRcdFx0bGFzdDogXCJcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRhZGRyZXNzOiB7XG5cdFx0XHRcdFx0c3RyZWV0MTogXCJcIixcblx0XHRcdFx0XHRzdHJlZXQyOiBcIlwiLFxuXHRcdFx0XHRcdHN0cmVldDM6IFwiXCIsXG5cdFx0XHRcdFx0Y2l0eTogXCJcIixcblx0XHRcdFx0XHRzdGF0ZTogXCJcIixcblx0XHRcdFx0XHR6aXA6IFwiXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0Y29udGFjdDoge1xuXHRcdFx0XHRcdGVtYWlsOiBcIlwiLFxuXHRcdFx0XHRcdHBob25lOiBcIlwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJlbGF0aW9uc2hpcDogXCJcIlxuXHRcdFx0fSxcblx0XHRcdG9yZGVyOiB7XG5cdFx0XHRcdHF0eTogXCIxXCIsXG5cdFx0XHRcdHZpc2liaWxpdHk6IHtcblx0XHRcdFx0XHRvbmU6IHRydWUsXG5cdFx0XHRcdFx0dHdvOiBmYWxzZSxcblx0XHRcdFx0XHR0aHJlZTogZmFsc2UsXG5cdFx0XHRcdFx0Zm91cjogZmFsc2UsXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRmcmVxdWVuY3k6IHtcblx0XHRcdFx0dmFsdWU6ICdtb250aGx5J1xuXHRcdFx0fSxcblx0XHRcdHNoaXBwaW5nRGVzdGluYXRpb25zOiBcIjFcIixcblx0XHRcdHJlY2lwaWVudHNCb3g6IFwiMVwiLFxuXHRcdFx0cmVjaXBpYW50U2VsZWN0ZWQ6IHtcblx0XHRcdFx0c3RhdGU6IGZhbHNlLFxuXHRcdFx0XHRpZDogXCJcIlxuXHRcdFx0fSxcblx0XHRcdHN1YlR5cGU6IHt9LFxuXHRcdFx0c2VsZWN0ZWRSZWNpcGlhbnQ6IDAsXG5cdFx0XHRlcnJvcnM6IHtcblx0XHRcdFx0bWlzc2luZ1JlcXVpcmVkOiBmYWxzZVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdCRzY29wZS5zdGF0ZVRlc3QgPSBzdGF0ZVNlcnZpY2VcblxuXHRcdC8vbG9jYWwgZnVuY3Rpb25zXG5cdFx0ZnVuY3Rpb24gYWRkVG9SZWNpcGlhbnRMaXN0KHJlbGF0aW9uc2hpcCkge1xuXHRcdFx0XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBuZXdSZWNpcGlhbnQgPSBPYmplY3QuY3JlYXRlKHJlY2lwaWFudFByb2ZpbGUpO1xuXHRcdFx0dmFyIGV4aXN0c0FscmVhZHkgPSBmYWxzZTtcblx0XHRcdHZhciBlbnRyeUluZGV4ID0gMDtcblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0Ly8xLiBjaGVjayBmb3IgdGhlIHJlbGF0aW9uc2hpcFxuXHRcdFx0JHNjb3BlLnVzZXJEYXRhLnJlY2lwaWFudExpc3QuZm9yRWFjaChmdW5jdGlvbihyZWNpcGlhbnQpIHtcblx0XHRcdFx0aWYocmVjaXBpYW50LnJlbGF0aW9uc2hpcCA9PSByZWxhdGlvbnNoaXApIHtcblx0XHRcdFx0XHRleGlzdHNBbHJlYWR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRlbnRyeUluZGV4ID0gaTtcblx0XHRcdFx0fTtcblx0XHRcdFx0aSsrO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vY29uc29sZS5sb2coJ2FkZGluZycsIHJlbGF0aW9uc2hpcCwgJ3RvIHJlY2lwaWFudCBsaXN0JywgJHNjb3BlLnVzZXJEYXRhLnJlY2lwaWFudExpc3QsIFwiYWxyZWFkeSBFeGlzdHM/XCIsIGV4aXN0c0FscmVhZHkpO1xuXG5cdFx0XHQvL2lmIHJlbGF0aW9uc2hpcCBkb2Vzbid0IGV4aXN0IHlldCwgYWRkIGl0XG5cdFx0XHRpZighZXhpc3RzQWxyZWFkeSkge1xuXHRcdFx0XHRuZXdSZWNpcGlhbnQucmVsYXRpb25zaGlwID0gcmVsYXRpb25zaGlwO1xuXHRcdFx0XHQkc2NvcGUudXNlckRhdGEucmVjaXBpYW50TGlzdC5wdXNoKG5ld1JlY2lwaWFudCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vcmV0dXJuIHJlc3VsdFxuXHRcdFx0cmV0dXJuIGVudHJ5SW5kZXg7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHJlbW92ZUZyb21SZWNpcGlhbnRMaXN0KHJlbGF0aW9uc2hpcCkge1xuXHRcdFx0XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdyZW1vdmluZycsIHJlbGF0aW9uc2hpcCwgJ3RvIHJlY2lwaWFudCBsaXN0Jyk7XG5cblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxzXG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdC8vaXRlcmF0ZSB0aHJvdWdoIGFycmF5XG5cdFx0XHQkc2NvcGUudXNlckRhdGEucmVjaXBpYW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHJlY2lwaWFudCkge1xuXHRcdFx0XHRpZihyZWNpcGlhbnQucmVsYXRpb25zaGlwID09IHJlbGF0aW9uc2hpcCkge1xuXHRcdFx0XHRcdCRzY29wZS51c2VyRGF0YS5yZWNpcGlhbnRMaXN0LnNwbGljZShpLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpKys7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9yZXR1cm4gcmVzdWx0XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gc2VsZWN0UmVjaXBpYW50KGluZGV4KSB7XG5cblx0XHRcdCRzY29wZS5zdGF0ZS5zZWxlY3RlZFJlY2lwaWFudCA9IGluZGV4O1xuXHRcdH07XG5cblx0XHQvL3ZpZXcgbW9kZWwgZnVuY3Rpb25zXG5cdFx0Ly9VUERBVEUgT1JERVIgVklTSUJJTElUWVxuXHRcdCRzY29wZS51cGRhdGVPcmRlclZpc2libGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWxlc1xuXHRcdFx0dmFyIGhhc2ggPSB7XCJvbmVcIjogMSwgXCJ0d29cIjogMiwgXCJ0aHJlZVwiOiAzLCBcImZvdXJcIjogNH07XG5cdFx0XHRcdFxuXHRcdFx0Ly9pdGVyYXRlIHRocm91Z2ggdmFsdWVzXG5cdFx0XHRPYmplY3Qua2V5cygkc2NvcGUuc3RhdGUub3JkZXIudmlzaWJpbGl0eSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdFx0aWYoaGFzaFtrZXldIDw9IHZhbHVlKSAkc2NvcGUuc3RhdGUub3JkZXIudmlzaWJpbGl0eVtrZXldID0gdHJ1ZVxuXHRcdFx0XHRcdGVsc2UgJHNjb3BlLnN0YXRlLm9yZGVyLnZpc2liaWxpdHlba2V5XSA9IGZhbHNlXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZygnY2hlY2tpbmcgdmFsdWVzJywgdmFsdWUsICRzY29wZS5zdGF0ZS5vcmRlci52aXNpYmlsaXR5KTtcblx0XHRcdFxuXHRcdH07XG5cblx0XHQvL1VQREFURSBGUkVRVUVOQ1lcblx0XHQkc2NvcGUudXBkYXRlRnJlcXVlbmN5ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdCRzY29wZS51c2VyRGF0YS5zaGlwcGluZ1NjaGVkdWxlID0gc2hpcHBpbmdTY2hlZHVsZXNbdmFsdWVdO1xuXHRcdH07XG5cblx0XHQvL1VQREFURSBPUkRFUiBTQ0hFRFVMRVxuXHRcdCRzY29wZS51cGRhdGVPcmRlclNjaGVkdWxlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdH1cblxuXHRcdC8vVVBEQVRFIFRIRSBTVUJTQ1JJUFRJT04gVFlQRVxuXHRcdCRzY29wZS51cGRhdGVTdWJUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIHVwZGF0ZUluZGV4ID0gMDtcblx0XHRcdCRzY29wZS51c2VyRGF0YS5zdWJUeXBlID0gdmFsdWU7XG5cblx0XHRcdGlmKHZhbHVlPT1cIm15c2VsZlwiKSB7XG5cdFx0XHRcdC8vJHNjb3BlLnN0YXRlLnJlY2lwaWVudHNCb3ggPSBcIjEwXCI7XG5cdFx0XHRcdGFkZFRvUmVjaXBpYW50TGlzdChcIk15c2VsZlwiKTtcblx0XHRcdFx0cmVtb3ZlRnJvbVJlY2lwaWFudExpc3QoXCJTb21lb25lXCIpO1xuXHRcdFx0XHRzZWxlY3RSZWNpcGlhbnQoMCk7XG5cdFx0XHR9IGVsc2UgaWYodmFsdWU9PVwib3RoZXJzXCIpIHtcblx0XHRcdFx0Ly8kc2NvcGUuc3RhdGUucmVjaXBpZW50c0JveCA9IFwiMTBcIjtcblx0XHRcdFx0dXBkYXRlSW5kZXggPSBhZGRUb1JlY2lwaWFudExpc3QoXCJTb21lb25lXCIpO1xuXHRcdFx0XHRyZW1vdmVGcm9tUmVjaXBpYW50TGlzdChcIk15c2VsZlwiKTtcblx0XHRcdFx0c2VsZWN0UmVjaXBpYW50KDApO1xuXHRcdFx0fSBlbHNlIGlmKHZhbHVlPT1cImJvdGhcIikge1xuXHRcdFx0XHQvLyRzY29wZS5zdGF0ZS5yZWNpcGllbnRzQm94ID0gXCIxMFwiO1xuXHRcdFx0XHR1cGRhdGVJbmRleCA9IGFkZFRvUmVjaXBpYW50TGlzdChcIk15c2VsZlwiKTtcblx0XHRcdFx0YWRkVG9SZWNpcGlhbnRMaXN0KFwiU29tZW9uZVwiKTtcblx0XHRcdFx0c2VsZWN0UmVjaXBpYW50KDApO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQkc2NvcGUuc2VsZWN0UmVjaXBpYW50ID0gZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHNlbGVjdFJlY2lwaWFudChpbmRleCk7XG5cdFx0XHQkc2NvcGUuc3RhdGUudGVtcFJlY2lwaWFudCA9ICRzY29wZS51c2VyRGF0YS5yZWNpcGlhbnRMaXN0W2luZGV4XTtcblx0XHR9O1xuXG5cdFx0JHNjb3BlLnVwZGF0ZVJlY2lwaWFudFZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4ID0gJHNjb3BlLnN0YXRlLnNlbGVjdGVkUmVjaXBpYW50O1xuXHRcdFx0JHNjb3BlLnVzZXJEYXRhLnJlY2lwaWFudExpc3RbaW5kZXhdID0gJHNjb3BlLnN0YXRlLnRlbXBSZWNpcGlhbnQ7XG5cdFx0fTsqL1xuXHRcdFxuXHR9OyIsImFuZ3VsYXIubW9kdWxlKCdhbnN1YicpLmNvbnRyb2xsZXIoJ3N1Y2Nlc3NDb250cm9sbGVyJywgc3VjY2Vzc0NvbnRyb2xsZXIpO1xuXG5zdWNjZXNzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHN1Y2Nlc3NDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJHJvdXRlUGFyYW1zKSB7XG5cdFxuXG5cdC8vZGVmaW5lIGxvY2FsIHZhcmFpYmxlc1xuXHQkc2NvcGUuY29uZmlybWF0aW9uQ29kZSA9ICRyb3V0ZVBhcmFtcy5jb25maXJtYXRpb25Db2RlO1xuXG5cdC8vbm90aWZ5IHByb2dyZXNzXG5cdGNvbnNvbGUubG9nKCdzdWNjZXNzIGNvbnRyb2xlcicsICRyb3V0ZVBhcmFtcy5jb25maXJtYXRpb25Db2RlLCAkc2NvcGUuY29uZmlybWF0aW9uQ29kZSk7XG59OyIsImFuZ3VsYXIubW9kdWxlKCdhbnN1YicpLmRpcmVjdGl2ZSgnYmlsbGluZ0FkZHJlc3MnLCBiaWxsaW5nQWRkcmVzcyk7XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGJpbGxpbmdBZGRyZXNzKCkge1xuXHRcdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0XHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9iaWxsaW5nQWRkcmVzcy5odG0nLFxuXHRcdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRcdHNjb3BlOiB7fSxcblx0XHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdFx0Y29udHJvbGxlcjogYmlsbGluZ0FkZHJlc3NDb250cm9sbGVyLFxuXHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHRcdH07XG5cblx0XHQvKiBAbmdJbmplY3QgKi9cblx0XHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cdFx0XG5cdFx0YmlsbGluZ0FkZHJlc3NDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ3VzZXJEYXRhU2VydmljZScsICdzdGF0ZVNlcnZpY2UnXTtcblxuXHRcdC8qIEBuZ0luamVjdCAqL1xuXHRcdGZ1bmN0aW9uIGJpbGxpbmdBZGRyZXNzQ29udHJvbGxlcigkc2NvcGUsICRsb2csIHVzZXJEYXRhU2VydmljZSwgc3RhdGVTZXJ2aWNlKSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0Ly9kZWZpbmUgdmlld21vZGVsIHZhbHVlc1xuXHRcdFx0c2VsZi51c2VyRGF0YSA9IHVzZXJEYXRhU2VydmljZTtcblx0XHRcdHNlbGYuc3RhdGUgPSBzdGF0ZVNlcnZpY2U7XG5cblx0XHRcdC8vY29uc29sZS5sb2coJ2luIGJpbGxpbmcgQURkcmVzcyBjb250cm9sbGVyJywgc2VsZi5zdGF0ZS5zaGlwaW5nU2FtZUFzQmlsbGluZyk7XG5cblx0XHR9O1xuXG5cdFx0cmV0dXJuIGRpcmVjdGl2ZTtcdFx0XG5cdH07IiwiYW5ndWxhci5tb2R1bGUoJ2Fuc3ViJykuZGlyZWN0aXZlKCdiaWxsaW5nSW5wdXQnLCBiaWxsaW5nSW5wdXQpO1xuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBiaWxsaW5nSW5wdXQoKSB7XG5cdFx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHRcdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2JpbGxpbmdJbnB1dC5odG0nLFxuXHRcdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRcdHNjb3BlOiB7fSxcblx0XHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdFx0Y29udHJvbGxlcjogYmlsbGluZ0lucHV0Q29udHJvbGxlcixcblx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0XHR9O1xuXG5cdFx0LyogQG5nSW5qZWN0ICovXG5cdFx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXHRcdFxuXHRcdGJpbGxpbmdJbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAndXNlckRhdGFTZXJ2aWNlJywgJ3N0YXRlU2VydmljZScsICdzZXJ2ZXJTZXJ2aWNlJ107XG5cblx0XHQvKiBAbmdJbmplY3QgKi9cblx0XHRmdW5jdGlvbiBiaWxsaW5nSW5wdXRDb250cm9sbGVyKCRzY29wZSwgJGxvZywgdXNlckRhdGFTZXJ2aWNlLCBzdGF0ZVNlcnZpY2UsIHNlcnZlclNlcnZpY2UpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIHZtID0gdGhpcztcblxuXHRcdFx0Ly9kZWZpbmUgdmlld21vZGVsIHZhbHVlc1xuXHRcdFx0dm0udXNlckRhdGEgPSB1c2VyRGF0YVNlcnZpY2U7XG5cdFx0XHR2bS5zdGF0ZSA9IHN0YXRlU2VydmljZTtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZygnaW4gY29udGFjdElucHV0dENvbnRyb2xsZXInKTtcblxuXHRcdFx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdFx0XHQvL2NvbGxlY3QgdGhlIHNxdWFyZUFwcElkXG5cdFx0XHRcdHNlcnZlclNlcnZpY2UuZ2V0LnNxckFwcElkKClcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oc3FBcHApIHtcblxuXHRcdFx0XHRcdHZtLnBheW1lbnRGb3JtID0gbmV3IFNxUGF5bWVudEZvcm0oe1xuXHRcdFx0XHQgICAgYXBwbGljYXRpb25JZDogc3FBcHAuaWQsXG5cdFx0XHRcdCAgICBpbnB1dENsYXNzOiAnc3EtaW5wdXQnLFxuXHRcdFx0XHQgICAgaW5wdXRTdHlsZXM6IFtcblx0XHRcdFx0ICAgICAge1xuXHRcdFx0XHQgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG5cdFx0ICAgICAgICAgICAgXHRwYWRkaW5nOiAnN3B4IDEycHgnLFxuXHRcdCAgICAgICAgICAgIFx0YmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCJcblx0XHRcdFx0ICAgICAgfVxuXHRcdFx0XHQgICAgXSxcblx0XHRcdFx0ICAgIGNhcmROdW1iZXI6IHtcblx0XHRcdFx0ICAgICAgZWxlbWVudElkOiAnc3EtY2FyZC1udW1iZXInLFxuXHRcdFx0XHQgICAgICBwbGFjZWhvbGRlcjogJ+KAouKAouKAouKAoiDigKLigKLigKLigKIg4oCi4oCi4oCi4oCiIOKAouKAouKAouKAoidcblx0XHRcdFx0ICAgIH0sXG5cdFx0XHRcdCAgICBjdnY6IHtcblx0XHRcdFx0ICAgICAgZWxlbWVudElkOiAnc3EtY3Z2Jyxcblx0XHRcdFx0ICAgICAgcGxhY2Vob2xkZXI6ICdDVlYnXG5cdFx0XHRcdCAgICB9LFxuXHRcdFx0XHQgICAgZXhwaXJhdGlvbkRhdGU6IHtcblx0XHRcdFx0ICAgICAgZWxlbWVudElkOiAnc3EtZXhwaXJhdGlvbi1kYXRlJyxcblx0XHRcdFx0ICAgICAgcGxhY2Vob2xkZXI6ICdNTS9ZWSdcblx0XHRcdFx0ICAgIH0sXG5cdFx0XHRcdCAgICBwb3N0YWxDb2RlOiB7XG5cdFx0XHRcdCAgICAgIGVsZW1lbnRJZDogJ3NxLXBvc3RhbC1jb2RlJ1xuXHRcdFx0XHQgICAgfSxcblx0XHRcdFx0ICAgIGNhbGxiYWNrczoge1xuXG5cdFx0XHRcdFx0ICAgICAgLy8gQ2FsbGVkIHdoZW4gdGhlIFNxUGF5bWVudEZvcm0gY29tcGxldGVzIGEgcmVxdWVzdCB0byBnZW5lcmF0ZSBhIGNhcmRcblx0XHRcdFx0XHQgICAgICAvLyBub25jZSwgZXZlbiBpZiB0aGUgcmVxdWVzdCBmYWlsZWQgYmVjYXVzZSBvZiBhbiBlcnJvci5cblx0XHRcdFx0XHQgICAgICBjYXJkTm9uY2VSZXNwb25zZVJlY2VpdmVkOiBmdW5jdGlvbihlcnJvcnMsIG5vbmNlLCBjYXJkRGF0YSkge1xuXHRcdFx0XHRcdCAgICAgICAgaWYgKGVycm9ycykge1xuXHRcdFx0XHRcdCAgICAgICAgICAkbG9nLmluZm8oXCJFbmNvdW50ZXJlZCBlcnJvcnM6XCIsIGVycm9ycyk7XG5cdFx0XHRcdFx0ICAgICAgICAgIHZtLmNhcmRfZXJyb3JzID0gZXJyb3JzO1xuXHRcdFx0ICAgICAgICAgICAgXHQgIHZtLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuXHRcdFx0ICAgICAgICAgICAgXHQgICRzY29wZS4kYXBwbHkoKTsgLy8gcmVxdWlyZWQgc2luY2UgdGhpcyBpcyBub3QgYW4gYW5ndWxhciBmdW5jdGlvblxuXG5cdFx0XHRcdFx0ICAgICAgICAvLyBObyBlcnJvcnMgb2NjdXJyZWQuIEV4dHJhY3QgdGhlIGNhcmQgbm9uY2UuXG5cdFx0XHRcdFx0ICAgICAgICB9IGVsc2Uge1xuXHRcdFx0XHRcdCAgICAgICAgICB2bS5jYXJkX2Vycm9ycyA9IFtdO1xuXHRcdFx0XHRcdCAgICAgICAgICAvLyBEZWxldGUgdGhpcyBsaW5lIGFuZCB1bmNvbW1lbnQgdGhlIGxpbmVzIGJlbG93IHdoZW4geW91J3JlIHJlYWR5XG5cdFx0XHRcdFx0ICAgICAgICAgIC8vIHRvIHN0YXJ0IHN1Ym1pdHRpbmcgbm9uY2VzIHRvIHlvdXIgc2VydmVyLlxuXHRcdFx0XHRcdCAgICAgICAgICAvL2FsZXJ0KCdOb25jZSByZWNlaXZlZDogJyArIG5vbmNlKTtcblxuXHRcdFx0XHRcdCAgICAgICAgICB2bS5jaGFyZ2VDYXJkV2l0aE5vbmNlKG5vbmNlKTtcblxuXHRcdFx0XHRcdCAgICAgICAgICAvKlxuXHRcdFx0XHRcdCAgICAgICAgICAgIFRoZXNlIGxpbmVzIGFzc2lnbiB0aGUgZ2VuZXJhdGVkIGNhcmQgbm9uY2UgdG8gYSBoaWRkZW4gaW5wdXRcblx0XHRcdFx0XHQgICAgICAgICAgICBmaWVsZCwgdGhlbiBzdWJtaXQgdGhhdCBmaWVsZCB0byB5b3VyIHNlcnZlci5cblx0XHRcdFx0XHQgICAgICAgICAgICBVbmNvbW1lbnQgdGhlbSB3aGVuIHlvdSdyZSByZWFkeSB0byB0ZXN0IG91dCBzdWJtaXR0aW5nIG5vbmNlcy5cblxuXHRcdFx0XHRcdCAgICAgICAgICAgIFlvdSdsbCBhbHNvIG5lZWQgdG8gc2V0IHRoZSBhY3Rpb24gYXR0cmlidXRlIG9mIHRoZSBmb3JtIGVsZW1lbnRcblx0XHRcdFx0XHQgICAgICAgICAgICBhdCB0aGUgYm90dG9tIG9mIHRoaXMgc2FtcGxlLCB0byBjb3JyZXNwb25kIHRvIHRoZSBVUkwgeW91IHdhbnQgdG9cblx0XHRcdFx0XHQgICAgICAgICAgICBzdWJtaXQgdGhlIG5vbmNlIHRvLlxuXHRcdFx0XHRcdCAgICAgICAgICAqL1xuXHRcdFx0XHRcdCAgICAgICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FyZC1ub25jZScpLnZhbHVlID0gbm9uY2U7XG5cdFx0XHRcdFx0ICAgICAgICAgIC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub25jZS1mb3JtJykuc3VibWl0KCk7XG5cblx0XHRcdFx0XHQgICAgICAgIH1cblx0XHRcdFx0XHQgICAgICB9LFxuXG5cdFx0XHRcdFx0ICAgICAgdW5zdXBwb3J0ZWRCcm93c2VyRGV0ZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCAgICAgICAgLy8gRmlsbCBpbiB0aGlzIGNhbGxiYWNrIHRvIGFsZXJ0IGJ1eWVycyB3aGVuIHRoZWlyIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC5cblx0XHRcdFx0XHQgICAgICB9LFxuXG5cdFx0XHRcdFx0ICAgICAgLy8gRmlsbCBpbiB0aGVzZSBjYXNlcyB0byByZXNwb25kIHRvIHZhcmlvdXMgZXZlbnRzIHRoYXQgY2FuIG9jY3VyIHdoaWxlIGFcblx0XHRcdFx0XHQgICAgICAvLyBidXllciBpcyB1c2luZyB0aGUgcGF5bWVudCBmb3JtLlxuXHRcdFx0XHRcdCAgICAgIGlucHV0RXZlbnRSZWNlaXZlZDogZnVuY3Rpb24oaW5wdXRFdmVudCkge1xuXHRcdFx0XHRcdCAgICAgICAgc3dpdGNoIChpbnB1dEV2ZW50LmV2ZW50VHlwZSkge1xuXHRcdFx0XHRcdCAgICAgICAgICBjYXNlICdmb2N1c0NsYXNzQWRkZWQnOlxuXHRcdFx0XHRcdCAgICAgICAgICAgIC8vIEhhbmRsZSBhcyBkZXNpcmVkXG5cdFx0XHRcdFx0ICAgICAgICAgICAgYnJlYWs7XG5cdFx0XHRcdFx0ICAgICAgICAgIGNhc2UgJ2ZvY3VzQ2xhc3NSZW1vdmVkJzpcblx0XHRcdFx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdFx0XHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdFx0XHRcdCAgICAgICAgICBjYXNlICdlcnJvckNsYXNzQWRkZWQnOlxuXHRcdFx0XHRcdCAgICAgICAgICAgIC8vIEhhbmRsZSBhcyBkZXNpcmVkXG5cdFx0XHRcdFx0ICAgICAgICAgICAgYnJlYWs7XG5cdFx0XHRcdFx0ICAgICAgICAgIGNhc2UgJ2Vycm9yQ2xhc3NSZW1vdmVkJzpcblx0XHRcdFx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdFx0XHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdFx0XHRcdCAgICAgICAgICBjYXNlICdjYXJkQnJhbmRDaGFuZ2VkJzpcblx0XHRcdFx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdFx0XHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdFx0XHRcdCAgICAgICAgICBjYXNlICdwb3N0YWxDb2RlQ2hhbmdlZCc6XG5cdFx0XHRcdFx0ICAgICAgICAgICAgLy8gSGFuZGxlIGFzIGRlc2lyZWRcblx0XHRcdFx0XHQgICAgICAgICAgICBicmVhaztcblx0XHRcdFx0XHQgICAgICAgIH1cblx0XHRcdFx0XHQgICAgICB9LFxuXG5cdFx0XHRcdFx0ICAgICAgcGF5bWVudEZvcm1Mb2FkZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCAgICAgICAgLy8gRmlsbCBpbiB0aGlzIGNhbGxiYWNrIHRvIHBlcmZvcm0gYWN0aW9ucyBhZnRlciB0aGUgcGF5bWVudCBmb3JtIGlzXG5cdFx0XHRcdFx0ICAgICAgICAvLyBkb25lIGxvYWRpbmcgKHN1Y2ggYXMgc2V0dGluZyB0aGUgcG9zdGFsIGNvZGUgZmllbGQgcHJvZ3JhbW1hdGljYWxseSkuXG5cdFx0XHRcdFx0ICAgICAgICAvLyBwYXltZW50Rm9ybS5zZXRQb3N0YWxDb2RlKCc5NDEwMycpO1xuXHRcdFx0XHRcdCAgICAgIH1cblx0XHRcdFx0XHQgICAgfVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0ICAgIFx0dm0ucGF5bWVudEZvcm0uYnVpbGQoKTtcblx0XHQgICAgXHR9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdCAgICBcdFx0JGxvZy5pbmZvKGVycm9yKTtcblx0XHQgICAgXHR9KTtcblxuXHRcdFx0fTtcblxuXG5cdFx0XHQvL3J1biB0aGUgaW5pdCBmdW5jdGlvblxuXHRcdFx0aW5pdCgpO1xuXG5cdFx0fTtcblxuXHRcdHJldHVybiBkaXJlY3RpdmU7XHRcdFxuXHR9OyIsImFuZ3VsYXIubW9kdWxlKCdhbnN1YicpLmRpcmVjdGl2ZSgnY29udGFjdElucHV0JywgY29udGFjdElucHV0KTtcblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gY29udGFjdElucHV0KCkge1xuXHRcdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0XHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9jb250YWN0SW5wdXQuaHRtJyxcblx0XHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0XHRzY29wZToge30sXG5cdFx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRcdGNvbnRyb2xsZXI6IGNvbnRhY3RJbnB1dHRDb250cm9sbGVyLFxuXHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHRcdH07XG5cblx0XHQvKiBAbmdJbmplY3QgKi9cblx0XHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cdFx0XG5cdFx0Y29udGFjdElucHV0dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAndXNlckRhdGFTZXJ2aWNlJywgJ3N0YXRlU2VydmljZSddO1xuXG5cdFx0LyogQG5nSW5qZWN0ICovXG5cdFx0ZnVuY3Rpb24gY29udGFjdElucHV0dENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCB1c2VyRGF0YVNlcnZpY2UsIHN0YXRlU2VydmljZSkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdC8vZGVmaW5lIHZpZXdtb2RlbCB2YWx1ZXNcblx0XHRcdHNlbGYudXNlckRhdGEgPSB1c2VyRGF0YVNlcnZpY2U7XG5cdFx0XHRzZWxmLnN0YXRlID0gc3RhdGVTZXJ2aWNlO1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCdpbiBjb250YWN0SW5wdXR0Q29udHJvbGxlcicpO1xuXG5cdFx0fTtcblxuXHRcdHJldHVybiBkaXJlY3RpdmU7XHRcdFxuXHR9OyIsImFuZ3VsYXIubW9kdWxlKCdhbnN1YicpLmRpcmVjdGl2ZSgnZnJlcXVlbmN5U2VsZWN0aW9uJywgZnJlcXVlbmN5U2VsZWN0aW9uKTtcblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gZnJlcXVlbmN5U2VsZWN0aW9uKCkge1xuXHRcdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0XHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9mcmVxdWVuY3lTZWxlY3Rpb24uaHRtJyxcblx0XHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0XHRzY29wZToge30sXG5cdFx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRcdGNvbnRyb2xsZXI6IGZyZXF1ZW5jeVNlbGVjdGlvbkNvbnRyb2xsZXIsXG5cdFx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdFx0fTtcblxuXHRcdC8qIEBuZ0luamVjdCAqL1xuXHRcdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblx0XHRcblx0XHRmcmVxdWVuY3lTZWxlY3Rpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG5cblx0XHQvKiBAbmdJbmplY3QgKi9cblx0XHRmdW5jdGlvbiBmcmVxdWVuY3lTZWxlY3Rpb25Db250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdFx0XHRzZWxmLmZyZXF1ZW5jaWVzID0gW1xuXHRcdFx0XHRcIm1vbnRoXCIsXG5cdFx0XHRcdFwicXVhcnRlclwiLFxuXHRcdFx0XHRcInllYXJcIlxuXHRcdFx0XTtcblxuXHRcdFx0c2VsZi5zdGFydHMgPSB7XG5cdFx0XHRcdG1vbnRoOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLFwiSnVseVwiLFwiQXVndXN0XCIsXCJTZXB0ZW1iZXJcIixcIk9jdG9iZXJcIixcIk5vdmVtYmVyXCIsXCJEZWNlbWJlclwiXSxcblx0XHRcdFx0cXVhcnRlcjogW1wiV2ludGVyXCIsIFwiU3ByaW5nXCIsIFwiU3VtbWVyXCIsIFwiRmFsbFwiXSxcblx0XHRcdFx0eWVhcjogW1wiMjAxOFwiLCBcIjIwMTlcIiwgXCIyMDIwXCJdXG5cdFx0XHR9XG5cblx0XHRcdHNlbGYuc2VsZWN0ZWRGcmVxdWVuY3kgPSAnJztcblx0XHRcdHNlbGYuc3RhcnRzSW4gPSAnJztcblxuXHRcdFx0Ly9jb25zb2xlLmxvZygnaW4gZnJlcXVlbmN5U2VsZWN0aW9uQ29udHJvbGxlcicpO1xuXG5cdFx0fTtcblxuXHRcdHJldHVybiBkaXJlY3RpdmU7XHRcdFxuXHR9OyIsImFuZ3VsYXIubW9kdWxlKCdhbnN1YicpLmRpcmVjdGl2ZSgncHJvZHVjdFNlbGVjdGlvbicsIHByb2R1Y3RTZWxlY3Rpb24pO1xuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBwcm9kdWN0U2VsZWN0aW9uKCkge1xuXHRcdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0XHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9wcm9kdWN0U2VsZWN0aW9uLmh0bScsXG5cdFx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdFx0c2NvcGU6IHtcblx0XHRcdH0sXG5cdFx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRcdGNvbnRyb2xsZXI6IHByb2R1Y3RTZWxlY3Rpb25Db250cm9sbGVyLFxuXHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHRcdH07XG5cblx0XHQvKiBAbmdJbmplY3QgKi9cblx0XHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcblx0XHR9XG5cdFx0XG5cdFx0cHJvZHVjdFNlbGVjdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAndXNlckRhdGFTZXJ2aWNlJywgJ3N0YXRlU2VydmljZSddO1xuXG5cdFx0LyogQG5nSW5qZWN0ICovXG5cdFx0ZnVuY3Rpb24gcHJvZHVjdFNlbGVjdGlvbkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCB1c2VyRGF0YVNlcnZpY2UsIHN0YXRlU2VydmljZSkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdFx0XHRzZWxmLnVzZXJEYXRhID0gdXNlckRhdGFTZXJ2aWNlO1xuXHRcdFx0c2VsZi5zdGF0ZSA9IHN0YXRlU2VydmljZS5wcm9kdWN0U2VsZWN0aW9uO1xuXHRcdFx0c2VsZi5zdGF0ZVsnaW5mb0JveCddID0gc3RhdGVTZXJ2aWNlLmluZm9Cb3hlcy5mbGF2b3JEZWZzO1xuXG5cdFx0XHRzZWxmLm9yZGVyTGlzdCA9IHVzZXJEYXRhU2VydmljZS5vcmRlcjtcblxuXHRcdFx0c2VsZi5wcm9kdWN0UHJpY2UgPSAxNztcblxuXHRcdFx0c2VsZi5vcmRlciA9IHtcblx0XHRcdFx0ZGlzY291bnRzOiAwLFxuXHRcdFx0XHRzaGlwcGluZzogMCxcblx0XHRcdFx0dG90YWw6IDBcblx0XHRcdH07XG5cblx0XHRcdHZhciBwcm9kdWN0T2JqZWN0ID0geyBcblx0XHRcdFx0aWQ6IDEsIFxuXHRcdFx0XHRmbGF2b3I6IFwiXCIsIFxuXHRcdFx0XHRtaXhmbHZyQ291bnQ6IDAsXG5cdFx0XHRcdG1peGZsdnJzOiB7XG5cdFx0XHRcdFx0c3JwZWM6IHsgaWQ6IFwic3JwZWNcIiwgbmFtZTogXCJTZWNyZXQgUmVjaXBlIFBlY2Fuc1wiLCBzZWxlY3RlZDpmYWxzZSwgY2xhc3Nlczp7XCJsaXN0LWdyb3VwLWl0ZW1cIjogdHJ1ZSwgXCJhY3RpdmVcIjogZmFsc2V9IH0sXG5cdFx0XHRcdFx0c3JhbG06IHsgaWQ6IFwic3JhbG1cIiwgbmFtZTogXCJTZWNyZXQgUmVjaXBlIEFsbW9uZHNcIiwgc2VsZWN0ZWQ6ZmFsc2UsIGNsYXNzZXM6e1wibGlzdC1ncm91cC1pdGVtXCI6IHRydWUsIFwiYWN0aXZlXCI6IGZhbHNlfSAgfSxcblx0XHRcdFx0XHRzcmNzaDogeyBpZDogXCJzcmNzaFwiLCBuYW1lOiBcIlNlY3JldCBSZWNpcGUgQ2FzaGV3c1wiLCBzZWxlY3RlZDpmYWxzZSwgY2xhc3Nlczp7XCJsaXN0LWdyb3VwLWl0ZW1cIjogdHJ1ZSwgXCJhY3RpdmVcIjogZmFsc2V9ICB9LFxuXHRcdFx0XHRcdHNycGVhOiB7IGlkOiBcInNycGVhXCIsIG5hbWU6IFwiU2VjcmV0IFJlY2lwZSBQZWFudXRzXCIsIHNlbGVjdGVkOmZhbHNlLCBjbGFzc2VzOntcImxpc3QtZ3JvdXAtaXRlbVwiOiB0cnVlLCBcImFjdGl2ZVwiOiBmYWxzZX0gIH0sXG5cdFx0XHRcdFx0Y25wZWM6IHsgaWQ6IFwiY25wZWNcIiwgbmFtZTogXCJDaW5uYW1vbiBQZWNhbnNcIiwgc2VsZWN0ZWQ6ZmFsc2UsIGNsYXNzZXM6e1wibGlzdC1ncm91cC1pdGVtXCI6IHRydWUsIFwiYWN0aXZlXCI6IGZhbHNlfSAgfSxcblx0XHRcdFx0XHRjbmFsbTogeyBpZDogXCJjbmFsbVwiLCBuYW1lOiBcIkNpbm5hbW9uIEFsbW9uZHNcIiwgc2VsZWN0ZWQ6ZmFsc2UsIGNsYXNzZXM6e1wibGlzdC1ncm91cC1pdGVtXCI6IHRydWUsIFwiYWN0aXZlXCI6IGZhbHNlfSAgfSxcblx0XHRcdFx0XHRkcnBlYzogeyBpZDogXCJkcnBlY1wiLCBuYW1lOiBcIkRydW5rZW4gUGVjYW5zXCIsIHNlbGVjdGVkOmZhbHNlLCBjbGFzc2VzOntcImxpc3QtZ3JvdXAtaXRlbVwiOiB0cnVlLCBcImFjdGl2ZVwiOiBmYWxzZX0gIH1cblx0XHRcdFx0fSBcblx0XHRcdH07XG5cblx0XHRcdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVzXG5cblx0XHRcdHNlbGYuZmxhdm9ycz0gW1xuXHRcdFx0XHR7IG5hbWU6ICdTZWNyZXQgUmVjaXBlIFBlY2FucycsIGRlc2NyaXB0aW9uOiBcIlN3ZWV0IGFuZCBTYWx0eVwiIH0sXG5cdFx0XHRcdHsgbmFtZTogJ1NlY3JldCBSZWNpcGUgQWxtb25kcycsIGRlc2NyaXB0aW9uOiBcIlN3ZWV0IGFuZCBTYWx0eVwiIH0sXG5cdFx0XHRcdHsgbmFtZTogJ1NlY3JldCBSZWNpcGUgQ2FzaGV3cycsIGRlc2NyaXB0aW9uOiBcIlN3ZWV0IGFuZCBTYWx0eVwiIH0sXG5cdFx0XHRcdHsgbmFtZTogJ1NlY3JldCBSZWNpcGUgUGVhbnV0cycsIGRlc2NyaXB0aW9uOiBcIlN3ZWV0IGFuZCBTYWx0eVwiIH0sXG5cdFx0XHRcdHsgbmFtZTogJ0Npbm5hbW9uIFBlY2FucycsIGRlc2NyaXB0aW9uOiBcIkJhdmFyaWFuXCIgfSxcblx0XHRcdFx0eyBuYW1lOiAnQ2lubmFtb24gQWxtb25kcycsIGRlc2NyaXB0aW9uOiBcIkJhdmFyaWFuXCIgfSxcblx0XHRcdFx0eyBuYW1lOiAnRHJ1bmtlbiBQZWNhbnMnLCBkZXNjcmlwdGlvbjogXCJTYXZvcnlcIiB9LFxuXHRcdFx0XHR7IG5hbWU6ICdNaXgtSXQtVXAnLCBkZXNjcmlwdGlvbjogXCJXaGF0ZXZlciBZb3UgTGlrZVwiIH1cblx0XHRcdF07XG5cblx0XHRcdC8vY29uc29sZS5sb2coJ2luIHByb2R1Y3RTZWxlY3Rpb25Db250cm9sbGVyJyk7XG5cblx0XHRcdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXHRcdFx0ZnVuY3Rpb24gc3VtT3JkZXIoKSB7XG5cblx0XHRcdFx0c2VsZi5vcmRlci50b3RhbCA9IChzZWxmLm9yZGVyTGlzdC5sZW5ndGggKiBzZWxmLnByb2R1Y3RQcmljZSkgLSBzZWxmLm9yZGVyLmRpc2NvdW50cztcblx0XHRcdFx0aWYoc2VsZi5vcmRlckxpc3QubGVuZ3RoID09IDQpIHNlbGYub3JkZXIudG90YWwgPSBzZWxmLm9yZGVyLnRvdGFsIC0gc2VsZi5wcm9kdWN0UHJpY2U7XG5cdFx0XHR9O1xuXG5cdFx0XHQvL2RlZmluZSB2aWV3IG1vZGVsIGZ1bmN0aW9uc1xuXHRcdFx0Ly9BREQgQSBQUk9EVUNUIEJVVFRPTlxuXHRcdFx0c2VsZi5hZGRBUHJvZHVjdCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJlbHNcblx0XHRcdFx0dmFyIG5vT2ZQcm9kdWN0cyA9IHNlbGYub3JkZXJMaXN0Lmxlbmd0aDtcblxuXHRcdFx0XHQvL2lmIHRoZXJlIGlzIHJvb20gYWRkIGFub3RoZXIgcHJvZHVjdFxuXHRcdFx0XHRpZihub09mUHJvZHVjdHMgPCA0KSBzZWxmLm9yZGVyTGlzdC5wdXNoKE9iamVjdC5jcmVhdGUocHJvZHVjdE9iamVjdCkpO1xuXG5cdFx0XHRcdC8vaWYgdGhpcyBpcyB0aGUgbGFzdCBhdmFpbGFibGUgc2xvdCBoaWRlIHRoZSBhZGQgYnV0dG9uXG5cdFx0XHRcdGlmKG5vT2ZQcm9kdWN0cyA9PSAzKSBzZWxmLnN0YXRlLmFkZEFQcm9kdWN0QnRuLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0XHQvL2lmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgcHJvZHVjdCBhZGQgdGhlIHJlbW92ZSBidXR0b25cblx0XHRcdFx0aWYobm9PZlByb2R1Y3RzID4gMCkgc2VsZi5zdGF0ZS5yZW1vdmVMYXN0UHJvZHVjdEJ0bi52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHQvL21ha2Ugc3VyZSB0aGUgaWQncyBhcmUgY29ycmVjdFxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDw9IG5vT2ZQcm9kdWN0czsgaSsrKSB7XG5cdFx0XHRcdFx0c2VsZi5vcmRlckxpc3RbaV0uaWQgPSBpICsgMVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9jYWxjdWxhdGUgbW9uZXlcblx0XHRcdFx0Ly9pZihub09mUHJvZHVjdHMgPT0gMykgc2VsZi5vcmRlci5kaXNjb3VudHMgPSBzZWxmLnByb2R1Y3RQcmljZTtcblxuXHRcdFx0XHRzdW1PcmRlcigpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdhZGRpbmcgYSBwcm9kdWN0Jyk7XG5cdFx0XHR9O1xuXG5cdFx0XHQvL1JFTU9WRSBMQVNUIFBST0RVQ1QgQlVUVE9OXG5cdFx0XHRzZWxmLnJlbW92ZUxhc3RQcm9kdWN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0XHR2YXIgbm9PZlByb2R1Y3RzID0gc2VsZi5vcmRlckxpc3QubGVuZ3RoO1xuXHRcdFx0XHR2YXIgcmVtb3ZlSW5kZXggPSBub09mUHJvZHVjdHMgLSAxO1xuXG5cdFx0XHRcdC8vaWYgdGhlcmUgYXJlIGF0IGxlYXN0IHR3byBwcm9kdWN0cywgcmVtb3ZlIG9uZVxuXHRcdFx0XHRpZihub09mUHJvZHVjdHMgPiAxKSBzZWxmLm9yZGVyTGlzdC5zcGxpY2UocmVtb3ZlSW5kZXgsIDEpO1xuXG5cdFx0XHRcdC8vaWYgZG93biB0byBvbmUgaXRlbSwgaGlkZSB0aGUgcmVtb3ZlIGJ1dHRvblxuXHRcdFx0XHRpZihub09mUHJvZHVjdHMgPT0gMikgc2VsZi5zdGF0ZS5yZW1vdmVMYXN0UHJvZHVjdEJ0bi52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly9icmluZyB0aGUgYWRkIGJ1dHRvbiBiYWNrXG5cdFx0XHRcdHNlbGYuc3RhdGUuYWRkQVByb2R1Y3RCdG4udmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdFx0Ly9jYWxjdWxhdGUgbW9uZXlcblx0XHRcdFx0aWYobm9PZlByb2R1Y3RzID09IDQpIHNlbGYub3JkZXIuZGlzY291bnRzID0gMDtcblxuXHRcdFx0XHRzdW1PcmRlcigpO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ3JlbW92aW5nIHByb2R1Y3QnLCBub09mUHJvZHVjdHMpO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly9SRU1PVkUgQSBQUk9EVUNUIEJVVFRPTlxuXHRcdFx0c2VsZi5yZW1vdmVBUHJvZHVjdCA9IGZ1bmN0aW9uKGlkKSB7XG5cdFx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0XHR2YXIgbm9PZlByb2R1Y3RzID0gc2VsZi5vcmRlckxpc3QubGVuZ3RoO1xuXHRcdFx0XHR2YXIgcmVtb3ZlSW5kZXggPSBpZCAtIDE7XG5cblx0XHRcdFx0Ly9pZiB0aGVyZSBhcmUgYXQgbGVhc3QgdHdvIHByb2R1Y3RzLCByZW1vdmUgb25lXG5cdFx0XHRcdGlmKG5vT2ZQcm9kdWN0cyA+IDEpIHNlbGYub3JkZXJMaXN0LnNwbGljZShyZW1vdmVJbmRleCwgMSk7XG5cblx0XHRcdFx0Ly9tYWtlIHN1cmUgdGhlIGlkJ3MgYXJlIGNvcnJlY3Rcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8PSAoc2VsZi5vcmRlckxpc3QubGVuZ3RoIC0gMSk7IGkrKykge1xuXHRcdFx0XHRcdHNlbGYub3JkZXJMaXN0W2ldLmlkID0gaSArIDFcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN1bU9yZGVyKCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vVkFMSURBVEUgVEhFIFBST0RVQ1RTIFdIRU4gQ0hBTkdFRFxuXHRcdFx0c2VsZi52YWxpZGF0ZVByb2R1Y3RzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciB2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwidmFsaWRhdGVpbmcgcHJvZHVjdHNcIik7XG5cblx0XHRcdFx0aWYodmFsaWQpIHNlbGYuc3RhdGUuaGVhZGVyU3R5bGUuY29sb3IgPSBcInJnYigwLDE2NSwxMjgpXCJcblx0XHRcdH1cblxuXHRcdFx0Ly9cblx0XHRcdHNlbGYuY291bnRNaXhGbGF2b3JzID0gZnVuY3Rpb24oZmxhdm9yT2JqZWN0KSB7XG5cdFx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0XHR2YXIgY291bnRlciA9IDA7XG5cblx0XHRcdFx0Ly9pdGVyYXRlIHRocm9ndWggb2JqZWN0XG5cdFx0XHRcdE9iamVjdC5rZXlzKGZsYXZvck9iamVjdCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdFx0XHRpZihmbGF2b3JPYmplY3Rba2V5XS5zZWxlY3RlZCkgY291bnRlcisrXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBjb3VudGVyO1xuXHRcdFx0fTtcblxuXHRcdFx0c2VsZi51cGRhdGVTaG9wcGluZ0NhcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ3VwZGF0aW5nIHNob3BwaW5nIGNhcnQnKTtcblx0XHRcdFx0Ly9zZWxmLnVzZXJEYXRhLm9yZGVyID0gc2VsZi5vcmRlckxpc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vc3RhcnQgdGhpcyBieSBhZGRpbmcgYSBwcm9kdWN0IHRvIHRoZSBvcmRlciBsaXN0XG5cdFx0XHRzZWxmLm9yZGVyTGlzdC5wdXNoKE9iamVjdC5jcmVhdGUocHJvZHVjdE9iamVjdCkpO1xuXG5cdFx0XHRzdW1PcmRlcigpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gZGlyZWN0aXZlO1x0XHRcblx0fTsiLCJhbmd1bGFyLm1vZHVsZSgnYW5zdWInKS5kaXJlY3RpdmUoJ3NoaXBEZXN0Jywgc2hpcERlc3QpO1xuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBzaGlwRGVzdCgpIHtcblx0XHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdFx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHRcdHRlbXBsYXRlOiAnPGRpdj50ZXN0aW5nPC9kaXY+Jyxcblx0XHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0XHRzY29wZToge30sXG5cdFx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRcdGNvbnRyb2xsZXI6IHNoaXBEZXN0Q29udHJvbGxlcixcblx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0XHR9O1xuXG5cdFx0LyogQG5nSW5qZWN0ICovXG5cdFx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXHRcdFxuXHRcdHNoaXBEZXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICd6aXBjb21wbGV0ZSddO1xuXG5cdFx0LyogQG5nSW5qZWN0ICovXG5cdFx0ZnVuY3Rpb24gc2hpcERlc3RDb250cm9sbGVyKCRzY29wZSwgJGxvZywgemlwY29tcGxldGUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRzZWxmLnppcENoZWNrID0gemlwY29tcGxldGU7XG5cblx0XHRcdC8vY29uc29sZS5sb2coJ2luIHNoaXBEZXN0Q29udHJvbGxlcicpO1xuXG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGlyZWN0aXZlO1xuXHR9IiwiYW5ndWxhci5tb2R1bGUoJ2Fuc3ViJykuZGlyZWN0aXZlKCdzaW5nbGVBZGRyZXNzSW5wdXQnLCBzaW5nbGVBZGRyZXNzSW5wdXQpO1xuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBzaW5nbGVBZGRyZXNzSW5wdXQoKSB7XG5cdFx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHRcdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL3NpbmdsZUFkZHJlc3NJbnB1dC5odG0nLFxuXHRcdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRcdHNjb3BlOiB7XG5cdFx0XHRcdGFkZHJlc3M6IFwiPVwiXG5cdFx0XHR9LFxuXHRcdFx0bGluazogbGlua0Z1bmMsXG5cdFx0XHRjb250cm9sbGVyOiBzaW5nbGVBZGRyZXNzSW5wdXRDb250cm9sbGVyLFxuXHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHRcdH07XG5cblx0XHQvKiBAbmdJbmplY3QgKi9cblx0XHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cdFx0XG5cdFx0c2luZ2xlQWRkcmVzc0lucHV0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICd1c2VyRGF0YVNlcnZpY2UnLCAnc3RhdGVTZXJ2aWNlJ107XG5cblx0XHQvKiBAbmdJbmplY3QgKi9cblx0XHRmdW5jdGlvbiBzaW5nbGVBZGRyZXNzSW5wdXRDb250cm9sbGVyKCRzY29wZSwgJGxvZywgdXNlckRhdGFTZXJ2aWNlLCBzdGF0ZVNlcnZpY2UpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHQvL2RlZmluZSB2aWV3bW9kZWwgdmFsdWVzXG5cdFx0XHRzZWxmLnVzZXJEYXRhID0gdXNlckRhdGFTZXJ2aWNlO1xuXHRcdFx0c2VsZi5zdGF0ZSA9IHN0YXRlU2VydmljZVxuXHRcdFx0Ly9jb25zb2xlLmxvZygnaW4gc2luZ2xlQWRkcmVzc0lucHV0Q29udHJvbGxlcicpO1xuXG5cdFx0XHRzZWxmLnVwZGF0ZUJpbGxpbmdBZGRyZXNzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKHNlbGYuc3RhdGUuc2hpcGluZ1NhbWVBc0JpbGxpbmcpIHtcblx0XHRcdFx0XHRzZWxmLnVzZXJEYXRhLmJpbGxpbmdBZGRyZXNzLnN0cmVldCA9IHNlbGYudXNlckRhdGEuc2hpcHBpbmdEZXN0aW5hdGlvbi5zdHJlZXRcblx0XHRcdFx0XHRzZWxmLnVzZXJEYXRhLmJpbGxpbmdBZGRyZXNzLnppcCA9IHNlbGYudXNlckRhdGEuc2hpcHBpbmdEZXN0aW5hdGlvbi56aXBcblx0XHRcdFx0XHRzZWxmLnVzZXJEYXRhLmJpbGxpbmdBZGRyZXNzLmNpdHkgPSBzZWxmLnVzZXJEYXRhLnNoaXBwaW5nRGVzdGluYXRpb24uY2l0eVxuXHRcdFx0XHRcdHNlbGYudXNlckRhdGEuYmlsbGluZ0FkZHJlc3Muc3RhdGUgPSBzZWxmLnVzZXJEYXRhLnNoaXBwaW5nRGVzdGluYXRpb24uc3RhdGVcblx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHJldHVybiBkaXJlY3RpdmU7XHRcdFxuXHR9OyIsImFuZ3VsYXIubW9kdWxlKCdhbnN1YicpLmRpcmVjdGl2ZSgnc3ViVGVybXNDb25kJywgc3ViVGVybXNDb25kKTtcblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gc3ViVGVybXNDb25kKCkge1xuXHRcdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0XHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9zdWJUZXJtc0NvbmQuaHRtJyxcblx0XHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0XHRzY29wZToge1xuXHRcdFx0fSxcblx0XHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdFx0Y29udHJvbGxlcjogc3ViVGVybXNDb25kQ29udHJvbGxlcixcblx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0XHR9O1xuXG5cdFx0LyogQG5nSW5qZWN0ICovXG5cdFx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXHRcdFxuXHRcdHN1YlRlcm1zQ29uZENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3N0YXRlU2VydmljZScsICd1c2VyRGF0YVNlcnZpY2UnLCAndmFsaWRhdGlvblNlcnZpY2UnLCAnc3VibWlzc2lvblNlcnZpY2UnXTtcblxuXHRcdC8qIEBuZ0luamVjdCAqL1xuXHRcdGZ1bmN0aW9uIHN1YlRlcm1zQ29uZENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sIHN0YXRlU2VydmljZSwgdXNlckRhdGFTZXJ2aWNlLCB2YWxpZGF0aW9uU2VydmljZSwgc3VibWlzc2lvblNlcnZpY2UpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlc1xuXHRcdFx0c2VsZi5zdGF0ZSA9IHN0YXRlU2VydmljZTtcblx0XHRcdHNlbGYudXNlckRhdGEgPSB1c2VyRGF0YVNlcnZpY2U7XG5cdFx0XHRzZWxmLnZhbGlkYXRlID0gdmFsaWRhdGlvblNlcnZpY2U7XG5cblx0XHRcdC8vY29uc29sZS5sb2coJ2luIHN1YlRlcm1zQ29uZENvbnRyb2xsZXInKTtcblx0XHRcdHNlbGYuc3VibWl0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdzdWJtaXR0aWcgdGhlIGZvcm0nKTtcblxuXHRcdFx0XHQvL3N1Ym1pdCB0aGUgZm9ybVxuXHRcdFx0XHRzdWJtaXNzaW9uU2VydmljZS5zdWJtaXQoc2VsZi51c2VyRGF0YSlcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XHRcdFx0dmFyIG5ld1BhdGggPSAnL3N1Y2Nlc3MvJyArIHMuZGF0YTtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnZ290IHRoaXMgcGF0aCBiYWNrJywgbmV3UGF0aClcblx0XHRcdFx0XHQkbG9jYXRpb24ucGF0aChuZXdQYXRoKTtcblx0XHRcdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cblx0XHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ3RoZXJlIHdhcyBhbiBlcnJvcicsIGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHRyZXR1cm4gZGlyZWN0aXZlO1x0XHRcblx0fTsiLCIvKlxuKlx0Uk9VVEVTLUNPTkZJR1xuKlxuKlx0VGhpcyBtb2R1bGUgc2V0cyB1cCBhbGwgdGhlIHJlcXVpcmVkIGFuZ3VsYXIgcm91dGVzIGZvciB0aGlzIHdlYiBhcHAuXG4qL1xuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2Fuc3ViJylcbiAgICAuY29uZmlnKGNvbmZpZyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuXHQkbG9jYXRpb25Qcm92aWRlci5oYXNoUHJlZml4KCcnKTtcbiAgICAkcm91dGVQcm92aWRlclxuXHQvL1BVQkxJQyBST1VURVNcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9tb250aGx5U3ViLmh0bScsICAgICAgLy8ndmlld3MvbW9udGhseVN1Yi5odG0nXG4gICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3N1Y2Nlc3MvOmNvbmZpcm1hdGlvbkNvZGUnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc3VjY2Vzcy5odG0nLCAgICAgIC8vJ3ZpZXdzL3N1Y2Nlc3MuaHRtbCdcbiAgICAgICAgY29udHJvbGxlcjogJ3N1Y2Nlc3NDb250cm9sbGVyJywgICAgICAgICAgIC8vJ3N1Y2Nlc3MnXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG5cdC5vdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICB9KTtcbn1cblxuLypcbiogICBSRVFVSVJFRCBGVU5DVElPTlNcbipcbiovXG5cblxuIiwiYW5ndWxhci5tb2R1bGUoJ2Fuc3ViJykuc2VydmljZSgnZXJyb3JIYW5kbGluZ1NlcnZpY2UnLCBlcnJvckhhbmRsaW5nU2VydmljZSk7XG5cdFx0XG4vKiBAbmdJbmplY3QgKi9cbmVycm9ySGFuZGxpbmdTZXJ2aWNlLiRpbmplY3QgPSBbXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBlcnJvckhhbmRsaW5nU2VydmljZSgpIHtcblx0Ly9kZWZpbmUgbG9jYWwgdmFyYWlibGVzXG5cdHZhciBlcnJvckhhbmRsaW5nID0ge1xuXHRcdFxuXHR9O1xuXG5cdHJldHVybiBlcnJvckhhbmRsaW5nO1xufTtcdCIsIlx0YW5ndWxhci5tb2R1bGUoJ2Fuc3ViJykuc2VydmljZSgnbW9kYWxTZXJ2aWNlJywgbW9kYWxTZXJ2aWNlKTtcblxuXHQvKiBAbmdJbmplY3QgKi9cblx0bW9kYWxTZXJ2aWNlLiRpbmplY3QgPSBbJyR1aWJNb2RhbCddO1xuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBtb2RhbFNlcnZpY2UoJHVpYk1vZGFsKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIG1vZGFsRGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgIGtleWJvYXJkOiB0cnVlLFxuICAgICAgICAgICAgbW9kYWxGYWRlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9tb2RhbC5odG0nXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1vZGFsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uVGV4dDogJ0Nsb3NlJyxcbiAgICAgICAgICAgIGFjdGlvbkJ1dHRvblRleHQ6ICdPSycsXG4gICAgICAgICAgICBoZWFkZXJUZXh0OiAnUHJvY2VlZD8nLFxuICAgICAgICAgICAgYm9keVRleHQ6ICdQZXJmb3JtIHRoaXMgYWN0aW9uPydcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNob3dNb2RhbCA9IGZ1bmN0aW9uIChjdXN0b21Nb2RhbERlZmF1bHRzLCBjdXN0b21Nb2RhbE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghY3VzdG9tTW9kYWxEZWZhdWx0cykgY3VzdG9tTW9kYWxEZWZhdWx0cyA9IHt9O1xuICAgICAgICAgICAgY3VzdG9tTW9kYWxEZWZhdWx0cy5iYWNrZHJvcCA9ICdzdGF0aWMnO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvdyhjdXN0b21Nb2RhbERlZmF1bHRzLCBjdXN0b21Nb2RhbE9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uIChjdXN0b21Nb2RhbERlZmF1bHRzLCBjdXN0b21Nb2RhbE9wdGlvbnMpIHtcbiAgICAgICAgICAgIC8vQ3JlYXRlIHRlbXAgb2JqZWN0cyB0byB3b3JrIHdpdGggc2luY2Ugd2UncmUgaW4gYSBzaW5nbGV0b24gc2VydmljZVxuICAgICAgICAgICAgdmFyIHRlbXBNb2RhbERlZmF1bHRzID0ge307XG4gICAgICAgICAgICB2YXIgdGVtcE1vZGFsT3B0aW9ucyA9IHt9O1xuXG4gICAgICAgICAgICAvL01hcCBhbmd1bGFyLXVpIG1vZGFsIGN1c3RvbSBkZWZhdWx0cyB0byBtb2RhbCBkZWZhdWx0cyBkZWZpbmVkIGluIHNlcnZpY2VcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRlbXBNb2RhbERlZmF1bHRzLCBtb2RhbERlZmF1bHRzLCBjdXN0b21Nb2RhbERlZmF1bHRzKTtcblxuICAgICAgICAgICAgLy9NYXAgbW9kYWwuaHRtbCAkc2NvcGUgY3VzdG9tIHByb3BlcnRpZXMgdG8gZGVmYXVsdHMgZGVmaW5lZCBpbiBzZXJ2aWNlXG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0ZW1wTW9kYWxPcHRpb25zLCBtb2RhbE9wdGlvbnMsIGN1c3RvbU1vZGFsT3B0aW9ucyk7XG5cbiAgICAgICAgICAgIGlmICghdGVtcE1vZGFsRGVmYXVsdHMuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIHRlbXBNb2RhbERlZmF1bHRzLmNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kYWxPcHRpb25zID0gdGVtcE1vZGFsT3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vZGFsT3B0aW9ucy5vayA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RhbE9wdGlvbnMuY2xvc2UgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAkbW9kYWwub3Blbih0ZW1wTW9kYWxEZWZhdWx0cykucmVzdWx0O1xuICAgICAgICB9O1xuXHRcdFxuXHR9O1x0IiwiYW5ndWxhci5tb2R1bGUoJ2Fuc3ViJykuc2VydmljZSgnc2VydmVyU2VydmljZScsIHNlcnZlclNlcnZpY2UpO1xuXHRcdFxuLyogQG5nSW5qZWN0ICovXG5zZXJ2ZXJTZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VydmVyU2VydmljZSgkaHR0cCkge1xuXHQvL2RlZmluZSBsb2NhbCB2YXJhaWJsZXNcblx0dmFyIHNlcnZlclNlcnZpY2UgPSB7XG5cdFx0Z2V0OiB7XG5cdFx0XHRzcXJBcHBJZDogZ2V0U3FyQXBwSWRcblx0XHR9XG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0U3FyQXBwSWQoKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0XG5cdFx0Ly9sb2cgcHJvZ3Jlc3Ncblx0XHQvLyRsb2cuaW5mbygnc2VuZGluZyBmcm9tIHNxcicpO1xuXHRcdFxuXHRcdC8vcmV0dXJuIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHQkaHR0cCh7XG5cdFx0XHRcdG1ldGhvZDogJ0dFVCcsXG5cdFx0XHRcdHVybDogJy9hcGkvc3F1YXJlSWQnXG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRjb25zb2xlLmxvZygnZ290IHRoaXMgcmVzcG9uc2UnLCByZXNwb25zZSk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG5cdFx0XHRcdFxuXHRcdFx0fSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhlcnJvcikge1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XHRcblx0fTtcblxuXHRyZXR1cm4gc2VydmVyU2VydmljZTtcbn07XHQiLCJhbmd1bGFyLm1vZHVsZSgnYW5zdWInKS5zZXJ2aWNlKCdzdGF0ZVNlcnZpY2UnLCBzdGF0ZVNlcnZpY2UpO1xuXHRcdFxuLyogQG5nSW5qZWN0ICovXG5zdGF0ZVNlcnZpY2UuJGluamVjdCA9IFsndXNlckRhdGFTZXJ2aWNlJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc3RhdGVTZXJ2aWNlKHVzZXJEYXRhU2VydmljZSkge1xuXHQvL2RlZmluZSBsb2NhbCB2YXJhaWJsZXNcblx0dmFyIHN0YXRlID0ge1xuXHRcdHNoaXBpbmdTYW1lQXNCaWxsaW5nOiB0cnVlLFxuXHRcdHByb2R1Y3RTZWxlY3Rpb246IHtcblx0XHRcdGFkZEFQcm9kdWN0QnRuOiB7XG5cdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHQnYnRuJzogdHJ1ZSxcblx0XHRcdFx0XHQnYnRuLXN1Y2Nlc3MnOiB0cnVlLFxuXHRcdFx0XHRcdCdidG4td2FybmluZyc6IGZhbHNlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZpc2libGU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRyZW1vdmVMYXN0UHJvZHVjdEJ0bjoge1xuXHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0J2J0bic6IHRydWUsXG5cdFx0XHRcdFx0J2J0bi1zdWNjZXNzJzogZmFsc2UsXG5cdFx0XHRcdFx0J2J0bi13YXJuaW5nJzogZmFsc2UsXG5cdFx0XHRcdFx0J2J0bi1kYW5nZXInOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0aGVhZGVyU3R5bGU6IHtcblx0XHRcdFx0Y29sb3I6IFwicmdiKDUxLDUxLDUxKVwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjb250YWN0SW5mbzoge1xuXHRcdFx0Zmlyc3RuYW1lOiB7XG5cdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHRcImZvcm0tY29udHJvbFwiOiB0cnVlLFxuXHRcdFx0XHRcdFwiaXMtdmFsaWRcIjogZmFsc2UsXG5cdFx0XHRcdFx0XCJpcy1pbnZhbGlkXCI6IGZhbHNlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFkZHJlc3NlZDogZmFsc2UsXG5cdFx0XHRcdGlzVmFsaWQ6IGZhbHNlLFxuXHRcdFx0XHRpc0ludmFsaWQ6IGZhbHNlXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRpbmZvQm94ZXM6IHtcblx0XHRcdGZsYXZvckRlZnM6IGZhbHNlLFxuXHRcdFx0dGVybXNDb25kczogZmFsc2Vcblx0XHR9LFxuXHRcdHNlY3Rpb25zQWRkcmVzc2VkOiB7XG5cdFx0XHRwcm9kdWN0U2VsZWN0aW9uOiBmYWxzZSxcblx0XHRcdHNpbmdsZVNoaXBwaW5nQWRkcmVzczogZmFsc2UsXG5cdFx0XHRjb250YWN0SW5mbzogZmFsc2UsXG5cdFx0XHR0ZXJtc0NvbmRzOiBmYWxzZVxuXHRcdH0sXG5cdFx0c2VjdGlvbnNDb21wbGV0ZWQ6IHtcblx0XHRcdHByb2R1Y3RTZWxlY3Rpb246IHRydWUsXG5cdFx0XHRzaW5nbGVTaGlwcGluZ0FkZHJlc3M6IHRydWUsXG5cdFx0XHRjb250YWN0SW5mbzogdHJ1ZSxcblx0XHRcdHRlcm1zQ29uZHM6IGZhbHNlXG5cdFx0fSxcblx0XHRzZWN0aW9uSGVhZGVyczoge1xuXHRcdFx0cHJvZHVjdFNlbGVjdGlvbjoge1xuXHRcdFx0XHRzaG93RXJyb3I6IGZhbHNlLFxuXHRcdFx0XHRzaG93Q29tcGxldGVkOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdHNpbmdsZVNoaXBwaW5nQWRkcmVzczoge1xuXHRcdFx0XHRzaG93RXJyb3I6IGZhbHNlLFxuXHRcdFx0XHRzaG93Q29tcGxldGVkOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdGNvbnRhY3RJbmZvOiB7XG5cdFx0XHRcdHNob3dFcnJvcjogZmFsc2UsXG5cdFx0XHRcdHNob3dDb21wbGV0ZWQ6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0dGVybXNDb25kczoge1xuXHRcdFx0XHRzaG93RXJyb3I6IGZhbHNlLFxuXHRcdFx0XHRzaG93Q29tcGxldGVkOiBmYWxzZVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y2hlY2tDb21wbGV0bmVzczogY2hlY2tDb21wbGV0bmVzcyxcblx0XHRyZWFkeUZvclN1Ym1pc3Npb246IGZhbHNlLFxuXHRcdHN1Ym1pc3Npb25CdG46IHtcblx0XHRcdFwiYnRuXCI6IHRydWUsXG5cdFx0XHRcImJ0bi1ibG9ja1wiOiB0cnVlLFxuXHRcdFx0XCJidG4tc3VjY2Vzc1wiOiBmYWxzZSxcblx0XHRcdFwiYnRuLXNlY29uZGFyeVwiOiB0cnVlXG5cdFx0fVxuXHR9O1xuXG5cdGZ1bmN0aW9uIHRlcm1zQ29uZHNBcmVHb29kKCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFxuXG5cdFx0cmV0dXJuIHVzZXJEYXRhU2VydmljZS5hZ3JlZWRUb1Rlcm1zO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tDb21wbGV0bmVzcygpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0dmFyIG5vRmxhZ3MgPSB0cnVlO1xuXG5cdFx0Ly9pdGVyYXRlIHRocm91Z2ggcmVxdWlybm1lbnRzXG5cdFx0T2JqZWN0LmtleXMoc2VsZi5zZWN0aW9uc0NvbXBsZXRlZCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGlmKHNlbGYuc2VjdGlvbnNDb21wbGV0ZWRba2V5XSA9PSBmYWxzZSkgbm9GbGFncyA9IGZhbHNlO1xuXHRcdH0pO1xuXG5cdFx0aWYobm9GbGFncykge1xuXHRcdFx0cmVhZHlGb3JTdWJtaXNzaW9uID0gdHJ1ZTtcblx0XHRcdHNlbGYuc3VibWlzc2lvbkJ0bltcImJ0bi1zdWNjZXNzXCJdID0gdHJ1ZTtcblx0XHRcdHNlbGYuc3VibWlzc2lvbkJ0bltcImJ0bi1zZWNvbmRhcnlcIl0gPSBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVhZHlGb3JTdWJtaXNzaW9uID0gZmFsc2U7XG5cdFx0XHRzZWxmLnN1Ym1pc3Npb25CdG5bXCJidG4tc3VjY2Vzc1wiXSA9IGZhbHNlO1xuXHRcdFx0c2VsZi5zdWJtaXNzaW9uQnRuW1wiYnRuLXNlY29uZGFyeVwiXSA9IHRydWU7XG5cdFx0fTtcblx0fVx0XG5cblx0cmV0dXJuIHN0YXRlO1xufTtcdCIsImFuZ3VsYXIubW9kdWxlKCdhbnN1YicpLnNlcnZpY2UoJ3N1Ym1pc3Npb25TZXJ2aWNlJywgc3VibWlzc2lvblNlcnZpY2UpO1xuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRzdWJtaXNzaW9uU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBzdWJtaXNzaW9uU2VydmljZSgkaHR0cCkge1xuXHRcdC8vY29uc29sZS5sb2coJ3RoaXMgaXMgdGhlIHN1Ym1pc3Npb24gc2VydmljZScpO1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHNlbGYuc3VibWl0ID0gZnVuY3Rpb24odXNlckRhdGEpIHtcblx0XHRcdC8vY29uc29sZS5sb2coJ3N1Ym1pdHRpbmcnLCB1c2VyRGF0YSk7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcdC8vdHJ5IFBPU1Rcblx0XHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHRcdHVybDogJy9zdWJzY3JpcHRpb24tYXBwbGljYXRpb24tc3VibWlzc2lvbicsXG5cdFx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZGF0YTogdXNlckRhdGFcblx0XHRcdFx0fSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdnb3QgdGhpcyByZXNwb25zZScsIHJlc3BvbnNlKTtcblx0XHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0fSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHR9O1xuXG5cdH07IiwiYW5ndWxhci5tb2R1bGUoJ2Fuc3ViJykuc2VydmljZSgndXNlckRhdGFTZXJ2aWNlJywgdXNlckRhdGFTZXJ2aWNlKTtcblx0XHRcbi8qIEBuZ0luamVjdCAqL1xudXNlckRhdGFTZXJ2aWNlLiRpbmplY3QgPSBbXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB1c2VyRGF0YVNlcnZpY2UoKSB7XG5cdC8vZGVmaW5lIGxvY2FsIHZhcmFpYmxlc1xuXHR2YXIgdXNlckRhdGEgPSB7XG5cdFx0bmFtZToge1xuXHRcdFx0Zmlyc3Q6IFwiXCIsXG5cdFx0XHRsYXN0OiBcIlwiXG5cdFx0fSxcblx0XHRjb250YWN0OiB7XG5cdFx0XHRlbWFpbDogXCJcIixcblx0XHRcdHBob25lOiBcIlwiXG5cdFx0fSxcblx0XHRzaGlwcGluZ0Rlc3RpbmF0aW9uOiB7XG5cdFx0XHRzdHJlZXQ6IFwiXCIsXG5cdFx0XHRjaXR5OiBcIlwiLFxuXHRcdFx0c3RhdGU6IFwiXCIsXG5cdFx0XHR6aXA6IFwiXCJcblx0XHR9LFxuXHRcdGJpbGxpbmdBZGRyZXNzOiB7XG5cdFx0XHRzdHJlZXQ6IFwiXCIsXG5cdFx0XHRjaXQ6IFwiXCIsXG5cdFx0XHRzdGF0ZTogXCJcIixcblx0XHRcdHppcDogXCJcIlxuXHRcdH0sXG5cdFx0Y2FyZDoge1xuXHRcdFx0Y2FyZF9udW1iZXI6IFwiXCIsXG5cdFx0XHRjdnY6IFwiXCIsXG5cdFx0XHRleHBpcmF0aW9uX2RhdGU6IFwiXCIsXG5cdFx0XHRwb3N0YWxfY29kZTogXCJcIlxuXHRcdH0sXG5cdFx0b3JkZXI6IFtdLFxuXHRcdGFncmVlZFRvVGVybXM6IGZhbHNlXG5cdH07XG5cblx0cmV0dXJuIHVzZXJEYXRhO1xufTtcdCIsImFuZ3VsYXIubW9kdWxlKCdhbnN1YicpLnNlcnZpY2UoJ3ZhbGlkYXRpb25TZXJ2aWNlJywgdmFsaWRhdGlvblNlcnZpY2UpO1xuXHRcdFxuLyogQG5nSW5qZWN0ICovXG52YWxpZGF0aW9uU2VydmljZS4kaW5qZWN0ID0gWydzdGF0ZVNlcnZpY2UnLCAndXNlckRhdGFTZXJ2aWNlJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdmFsaWRhdGlvblNlcnZpY2Uoc3RhdGVTZXJ2aWNlLCB1c2VyRGF0YVNlcnZpY2UpIHtcblx0Ly9kZWZpbmUgbG9jYWwgdmFyYWlibGVzXG5cdHZhciB2YWxpZGF0aW9uID0ge1xuXHRcdHRlcm1zQW5kQ29uZDogdGVybXNBbmRDb25kXG5cdH07XG5cblx0ZnVuY3Rpb24gdGVybXNBbmRDb25kKCkge1xuXHRcdGNvbnNvbGUubG9nKCd2YWxpZGF0aW5nIHRlcm1zIGFuZCBjb25kaXRpb25zJyk7XG5cdFx0Ly9tYWtlIHN1cmUgdGVybXMgYW5kIGNvbmRpdGlvbnMgaXMgbWFya2VkIGFzIGFkZHJlc3NlZFxuXHRcdHN0YXRlU2VydmljZS5zZWN0aW9uc0FkZHJlc3NlZC50ZXJtc0NvbmRzID0gdHJ1ZTtcblxuXHRcdC8vc2VjdGlvbiBjb21sZXRlbmVzcyBpcyBhIHJlZmxlY3Rpb24gb2YgdGhlIGFncmVlbWVudCBzdGF0dXNcblx0XHRzdGF0ZVNlcnZpY2Uuc2VjdGlvbnNDb21wbGV0ZWQudGVybXNDb25kcyA9IHVzZXJEYXRhU2VydmljZS5hZ3JlZWRUb1Rlcm1zO1xuXG5cdFx0Ly90b2dnbGUgY29tcGxldG5lc3Ncblx0XHRpZihzdGF0ZVNlcnZpY2Uuc2VjdGlvbnNDb21wbGV0ZWQudGVybXNDb25kcykge1xuXHRcdFx0c3RhdGVTZXJ2aWNlLnNlY3Rpb25IZWFkZXJzLnRlcm1zQ29uZHMuc2hvd0Vycm9yID0gZmFsc2U7XG5cdFx0XHRzdGF0ZVNlcnZpY2Uuc2VjdGlvbkhlYWRlcnMudGVybXNDb25kcy5zaG93Q29tcGxldGVkID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RhdGVTZXJ2aWNlLnNlY3Rpb25IZWFkZXJzLnRlcm1zQ29uZHMuc2hvd0Vycm9yID0gdHJ1ZTtcblx0XHRcdHN0YXRlU2VydmljZS5zZWN0aW9uSGVhZGVycy50ZXJtc0NvbmRzLnNob3dDb21wbGV0ZWQgPSBmYWxzZTtcblx0XHR9O1xuXG5cdH07XG5cblx0cmV0dXJuIHZhbGlkYXRpb247XG59O1x0IiwiYW5ndWxhci5tb2R1bGUoJ2Fuc3ViJykuc2VydmljZSgnemlwY29tcGxldGUnLCB6aXBjb21wbGV0ZSk7XG5cdFx0XG4vKiBAbmdJbmplY3QgKi9cbnppcGNvbXBsZXRlLiRpbmplY3QgPSBbXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB6aXBjb21wbGV0ZSgpIHtcblx0Ly9kZWZpbmUgbG9jYWwgdmFyYWlibGVzXG5cdHZhciBzZWxmID0gdGhpcztcblx0dmFyIGNsaWVudEtleSA9IFwibVNhalZZRDh1ckZTT2pXM3R1SmZoZG5Tak1yZXZrbWdsWDQwVzJiejEyS200Y1ZLNXZZWnBvZ1FnVGNmcDZqd1wiO1xuXHR2YXIgY2FjaGUgPSB7fTtcblx0Ly92YXIgY29udGFpbmVyID0gJChcIiNleGFtcGxlMVwiKTtcblx0Ly92YXIgZXJyb3JEaXYgPSBjb250YWluZXIuZmluZChcImRpdi50ZXh0LWVycm9yXCIpO1xuXG5cdC8vbG9jYWwgZnVuY3Rpb24gXG5cdHNlbGYuaGFuZGxlUmVzcCA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHQvLyBDaGVjayBmb3IgZXJyb3Jcblx0XHRpZiAoZGF0YS5lcnJvcl9tc2cpXG5cdFx0XHRjb25zb2xlLmxvZyhkYXRhLmVycm9yX21zZyk7XG5cdFx0XHQvL2Vycm9yRGl2LnRleHQoZGF0YS5lcnJvcl9tc2cpO1xuXHRcdGVsc2UgaWYgKFwiY2l0eVwiIGluIGRhdGEpXG5cdFx0e1xuXHRcdFx0Ly8gU2V0IGNpdHkgYW5kIHN0YXRlXG5cdFx0XHRjb250YWluZXIuZmluZChcImlucHV0W25hbWU9J2NpdHknXVwiKS52YWwoZGF0YS5jaXR5KTtcblx0XHRcdGNvbnRhaW5lci5maW5kKFwiaW5wdXRbbmFtZT0nc3RhdGUnXVwiKS52YWwoZGF0YS5zdGF0ZSk7XG5cdFx0fSBcblx0fTtcblxuXHQvL3ppcCBjaGVja2VyXG5cdHNlbGYuY2hlY2taaXAgPSBmdW5jdGlvbihlbnRlcmVkWmlwKSB7XG5cdFx0dmFyIHppcGNvZGUgPSBlbnRlcmVkWmlwLnN1YnN0cmluZygwLCA1KTsgXG5cblx0XHRpZiAoemlwY29kZS5sZW5ndGggPT0gNSAmJiAvXlswLTldKyQvLnRlc3QoemlwY29kZSkpIHtcblxuXHRcdFx0Y29uc29sZS5sb2coJ2NoZWNraW5nIHppcCcsIHppcGNvZGUpO1xuXHRcdH1cdFxuXHRcdFxuXHR9O1xufTtcdCJdfQ==
