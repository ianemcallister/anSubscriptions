config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("ansub",["ngRoute","ui.bootstrap"]);function mainController(e,t,n,i,r,o,s){e.userData=r,e.state=o,s.init()}function successController(e,t,n){e.confirmationCode=n.confirmationCode,console.log("success controler",n.confirmationCode,e.confirmationCode)}function billingAddress(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/billingAddress.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,i){}function n(e,t,n,i){this.userData=n,this.state=i}return n.$inject=["$scope","$log","userDataService","stateService"],e}function billingInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/billingInput.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,i){}function n(e,t,n,i){this.userData=n,this.state=i}return n.$inject=["$scope","$log","userDataService","stateService"],e}function contactInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/contactInput.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,i){}function n(e,t,n,i,r){var o=this;o.userData=n,o.state=i,o.validate=function(e,t){console.log("got these",e,t);var n=r.contact[e](t);o.state.contactInput[e].input["is-invalid"]=n?!(o.state.contactInput[e].input["is-valid"]=!0):!(o.state.contactInput[e].input["is-valid"]=!1)}}return n.$inject=["$scope","$log","userDataService","stateService","validationService"],e}function frequencySelection(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/frequencySelection.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,i){}function n(e,t){this.frequencies=["month","quarter","year"],this.starts={month:["January","February","March","April","May","June","July","August","September","October","November","December"],quarter:["Winter","Spring","Summer","Fall"],year:["2018","2019","2020"]},this.selectedFrequency="",this.startsIn=""}return n.$inject=["$scope","$log"],e}function productSelection(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/productSelection.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,i){}function n(t,e,n,i,r,o){var s=this;s.userData=n,s.state=i.productSelection,s.state.infoBox=i.infoBoxes.flavorDefs,r.download.productList().then(function(e){s.flavors=e,t.$apply()}).catch(function(e){console.log("product list error, ",e)}),s.orderList=n.order,s.productPrice=1699,s.order=n.tender;var a={id:1,sqrId:"",sqVarId:"",flavor:"",mixflvrCount:0,mixflvrs:{srpec:{id:"srpec",name:"SR Pecans",selected:!1,classes:{"list-group-item":!0,active:!1}},sralm:{id:"sralm",name:"SR Almonds",selected:!1,classes:{"list-group-item":!0,active:!1}},srcsh:{id:"srcsh",name:"SR Cashews",selected:!1,classes:{"list-group-item":!0,active:!1}},srpea:{id:"srpea",name:"SR Peanuts",selected:!1,classes:{"list-group-item":!0,active:!1}},cnpec:{id:"cnpec",name:"Cin Pecans",selected:!1,classes:{"list-group-item":!0,active:!1}},cnalm:{id:"cnalm",name:"Cin Almonds",selected:!1,classes:{"list-group-item":!0,active:!1}},drpec:{id:"drpec",name:"Drunk Pecans",selected:!1,classes:{"list-group-item":!0,active:!1}}},mixFlvrsSelected:[],mix:""};function c(){s.order.total=s.orderList.length*s.productPrice-s.order.discounts,4==s.orderList.length&&(s.order.total=s.order.total-s.productPrice)}s.addAProduct=function(){var e=s.orderList.length;e<4&&s.orderList.push(Object.create(a)),3==e&&(s.state.addAProductBtn.visible=!1),0<e&&(s.state.removeLastProductBtn.visible=!0);for(var t=0;t<=e;t++)s.orderList[t].id=t+1;c()},s.removeLastProduct=function(){var e=s.orderList.length,t=e-1;1<e&&s.orderList.splice(t,1),2==e&&(s.state.removeLastProductBtn.visible=!1),s.state.addAProductBtn.visible=!0,4==e&&(s.order.discounts=0),c()},s.removeAProduct=function(e){var t=e-1;1<s.orderList.length&&s.orderList.splice(t,1);for(var n=0;n<=s.orderList.length-1;n++)s.orderList[n].id=n+1;c()},s.validateProducts=function(){},s.countMixFlavors=function(t){var n=0;return Object.keys(t).forEach(function(e){t[e].selected&&n++}),n},s.updateShoppingCart=function(){s.orderList.forEach(function(t){s.flavors.forEach(function(e){e.name==t.flavor&&(t.sqrId=e.id,t.id<4?t.sqVarId=e.variations[0].id:t.sqVarId=e.variations[1].id)})}),console.log(s.orderList)},s.buildFlavorList=function(t){s.orderList[t].mixFlvrsSelected=[],Object.keys(s.orderList[t].mixflvrs).forEach(function(e){s.orderList[t].mixflvrs[e].selected&&s.orderList[t].mixFlvrsSelected.push(s.orderList[t].mixflvrs[e].name)})},s.checkPromoCode=function(e){o.get.checkPromoCode(e).then(function(e){console.log("this code is good?",e,s.state),s.state.promoCode.input["is-invalid"]=e?(s.state.promoCode.input["was-validated"]=!0,s.state.promoCode.input["needs-validation"]=!1,!(s.state.promoCode.input["is-valid"]=!0)):(s.state.promoCode.input["was-validated"]=!0,s.state.promoCode.input["needs-validation"]=!1,!(s.state.promoCode.input["is-valid"]=!1)),console.log(s.state),t.$apply()}).catch(function(e){console.log("Error",e)})},s.orderList.push(Object.create(a)),c()}return n.$inject=["$scope","$log","userDataService","stateService","squareService","serverService"],e}function shipDest(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",template:"<div>testing</div>",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,i){}function n(e,t,n){this.zipCheck=n}return n.$inject=["$scope","$log","zipcomplete"],e}function singleAddressInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/singleAddressInput.htm",replace:!0,scope:{address:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,i){}function n(e,t,n,i,r){var o=this;o.userData=n,o.state=i,console.log("in singleAddressInputController",r),o.validate=function(e,t){var n=r.physicalAddresses[e](t);o.state.singleAddressInput[e].input["is-invalid"]=n?!(o.state.singleAddressInput[e].input["is-valid"]=!0):!(o.state.singleAddressInput[e].input["is-valid"]=!1)},o.updateBillingAddress=function(){o.state.shipingSameAsBilling&&(o.userData.billingAddress.street=o.userData.shippingDestination.street,o.userData.billingAddress.zip=o.userData.shippingDestination.zip,o.userData.billingAddress.city=o.userData.shippingDestination.city,o.userData.billingAddress.state=o.userData.shippingDestination.state)}}return n.$inject=["$scope","$log","userDataService","stateService","validationService"],e}function subTermsCond(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/subTermsCond.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,i){}function n(e,t,n,i,r,o,s,a){this.state=i,this.userData=r,this.validate=o,this.square=a}return n.$inject=["$scope","$log","$location","stateService","userDataService","validationService","submissionService","squareService"],e}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/monthlySub.htm",controller:"mainController",controllerAs:"vm"}).when("/success/:confirmationCode",{templateUrl:"views/success.htm",controller:"successController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function errorHandlingService(){return{}}function modalService(e){var r={backdrop:!0,keyboard:!0,modalFade:!0,templateUrl:"partials/modal.htm"},o={closeButtonText:"Close",actionButtonText:"OK",headerText:"Proceed?",bodyText:"Perform this action?"};this.showModal=function(e,t){return e||(e={}),e.backdrop="static",this.show(e,t)},this.show=function(e,t){var n={},i={};return angular.extend(n,r,e),angular.extend(i,o,t),n.controller||(n.controller=function(e,t){e.modalOptions=i,e.modalOptions.ok=function(e){t.close(e)},e.modalOptions.close=function(e){t.dismiss("cancel")}}),$modal.open(n).result}}function serverService(r){return{chargeCard:function(e,i){return new Promise(function(t,n){r({method:"POST",url:e,headers:{"Content-Type":"application/json"},data:i}).then(function(e){console.log("got this response",e),t(e.data)},function(e){n(e)})})},get:{sqrAppId:function(){return new Promise(function(t,n){r({method:"GET",url:"/api/squareId"}).then(function(e){console.log("got this response",e),t(e.data)},function(e){n(e)})})},sqrPrdctList:function(){return new Promise(function(t,n){r({method:"GET",url:"/api/productList"}).then(function(e){console.log("got this response",e),t(e.data)},function(e){n(e)})})},checkPromoCode:function(e){return new Promise(function(t,n){r({method:"GET",url:"/api/check_promoCode?code="+e}).then(function(e){console.log("got this response",e),t(e.data)},function(e){n(e)})})}}}}function squareService(n,i,r,t){var o=this;function s(e){t.card.nonce=e,r.chargeCard("/api/charge_card",t).then(function(e){var t="/success/"+e.data;console.log("got this path back",t),i.path(t),n.$apply()}).catch(function(e){console.log("Error:",e)})}return{_chargeCardWithNonce:s,submitForm:function(){console.log("submitting form"),o.paymentForm.requestCardNonce()},download:{productList:function(){return new Promise(function(t,n){r.get.sqrPrdctList().then(function(e){t(e)}).catch(function(e){n(e)})})}},init:function(){r.get.sqrAppId().then(function(e){o.paymentForm=new SqPaymentForm({applicationId:e.id,inputClass:"sq-input",inputStyles:[{fontSize:"14px",padding:"7px 12px",backgroundColor:"transparent"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},callbacks:{cardNonceResponseReceived:function(e,t,n){e?(console.log("Encountered errors:",e),o.card_errors=e,o.isProcessing=!1):(o.card_errors=[],s(t))},unsupportedBrowserDetected:function(){},inputEventReceived:function(e){e.eventType},paymentFormLoaded:function(){}}}),o.paymentForm.build()}).catch(function(e){console.log(e)})}}}function stateService(e){return{shipingSameAsBilling:!0,productSelection:{addAProductBtn:{classes:{btn:!0,"btn-success":!0,"btn-warning":!1},visible:!0},removeLastProductBtn:{classes:{btn:!0,"btn-success":!1,"btn-warning":!1,"btn-danger":!0},visible:!1},headerStyle:{color:"rgb(51,51,51)"},promoCode:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}}},contactInfo:{firstname:{classes:{"form-control":!0,"is-valid":!1,"is-invalid":!1},addressed:!1,isValid:!1,isInvalid:!1}},infoBoxes:{flavorDefs:!1,termsConds:!1},sectionsAddressed:{productSelection:!1,singleShippingAddress:!1,contactInfo:!1,termsConds:!1},sectionsCompleted:{productSelection:!0,singleShippingAddress:!0,contactInfo:!0,termsConds:!1},sectionHeaders:{productSelection:{showError:!1,showCompleted:!1},singleShippingAddress:{showError:!1,showCompleted:!1},contactInfo:{showError:!1,showCompleted:!1},termsConds:{showError:!1,showCompleted:!1}},checkCompletness:function(){var t=this,n=!0;Object.keys(t.sectionsCompleted).forEach(function(e){0==t.sectionsCompleted[e]&&(n=!1)}),t.submissionBtn["btn-secondary"]=n?(readyForSubmission=!0,t.submissionBtn["btn-success"]=!0,!1):(readyForSubmission=!1,t.submissionBtn["btn-success"]=!1,!0)},readyForSubmission:!1,submissionBtn:{btn:!0,"btn-block":!0,"btn-success":!1,"btn-secondary":!0},contactInput:{first:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}},last:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}},phone:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}},email:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}}},singleAddressInput:{street:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}},zip:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}},city:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}},state:{field:{"was-validated":!1,"needs-validation":!0},input:{"is-valid":!1,"is-invalid":!1}}}}}function submissionService(i){this.submit=function(e){return new Promise(function(t,n){i({method:"POST",url:"/subscription-application-submission",headers:{"Content-Type":"application/json"},data:e}).then(function(e){console.log("got this response",e),t(e)},function(e){n(e)})})}}function userDataService(){return{name:{first:"",last:""},contact:{email:"",phone:""},shippingDestination:{street:"",city:"",state:"",zip:""},billingAddress:{street:"",city:"",state:"",zip:""},card:{nonce:"",last4:"",type:""},promoCode:"",orderNo:"",orderDate:"",order:[],tender:{discounts:0,shipping:0,total:0},agreedToTerms:!1}}function validationService(e,t){function n(e){var t=!1;return 0<e.length&&(t=!0),t}return{physicalAddresses:{street:n,zip:function(e){return/(^\d{5}$)|(^\d{5}-\d{4}$)/.test(e)},city:function(e){return/^[a-zA-Z]+(?:[\s-][a-zA-Z]+)*$/.test(e)},state:function(e){return/^((A[LKZR])|(C[AOT])|(D[EC])|(FL)|(GA)|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EDAINSOT])|(N[EVHJMYCD])|(O[HKR])|(PA)|(RI)|(S[CD])|(T[NX])|(UT)|(V[TA])|(W[AVIY]))$/.test(e)}},contact:{first:n,last:n,phone:function(e){return/^[2-9]\d{2}-\d{3}-\d{4}$/.test(e)},email:function(e){return/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/.test(e)}},termsAndCond:function(){console.log("validating terms and conditions"),e.sectionsAddressed.termsConds=!0,e.sectionsCompleted.termsConds=t.agreedToTerms,e.sectionsCompleted.termsConds?(e.sectionHeaders.termsConds.showError=!1,e.sectionHeaders.termsConds.showCompleted=!0):(e.sectionHeaders.termsConds.showError=!0,e.sectionHeaders.termsConds.showCompleted=!1)}}}function zipcomplete(){this.handleResp=function(e){e.error_msg?console.log(e.error_msg):"city"in e&&(container.find("input[name='city']").val(e.city),container.find("input[name='state']").val(e.state))},this.checkZip=function(e){var t=e.substring(0,5);5==t.length&&/^[0-9]+$/.test(t)&&console.log("checking zip",t)}}angular.module("ansub").controller("mainController",mainController),mainController.$inject=["$scope","$log","$location","submissionService","userDataService","stateService","squareService"],angular.module("ansub").controller("successController",successController),successController.$inject=["$scope","$log","$routeParams"],angular.module("ansub").directive("billingAddress",billingAddress),angular.module("ansub").directive("billingInput",billingInput),angular.module("ansub").directive("contactInput",contactInput),angular.module("ansub").directive("frequencySelection",frequencySelection),angular.module("ansub").directive("productSelection",productSelection),angular.module("ansub").directive("shipDest",shipDest),angular.module("ansub").directive("singleAddressInput",singleAddressInput),angular.module("ansub").directive("subTermsCond",subTermsCond),angular.module("ansub").config(config),angular.module("ansub").service("errorHandlingService",errorHandlingService),errorHandlingService.$inject=[],angular.module("ansub").service("modalService",modalService),modalService.$inject=["$uibModal"],angular.module("ansub").service("serverService",serverService),serverService.$inject=["$http"],angular.module("ansub").service("squareService",squareService),squareService.$inject=["$rootScope","$location","serverService","userDataService"],angular.module("ansub").service("stateService",stateService),stateService.$inject=["userDataService"],angular.module("ansub").service("submissionService",submissionService),submissionService.$inject=["$http"],angular.module("ansub").service("userDataService",userDataService),userDataService.$inject=[],angular.module("ansub").service("validationService",validationService),validationService.$inject=["stateService","userDataService"],angular.module("ansub").service("zipcomplete",zipcomplete),zipcomplete.$inject=[];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
