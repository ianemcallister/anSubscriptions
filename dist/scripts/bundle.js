config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("ansub",["ngRoute","ui.bootstrap"]);function mainController(e,t,r,n,s,i){e.userData=n,e.state=s,i.init()}function successController(e,t,r){e.confirmationCode=r.confirmationCode,console.log("success controler",r.confirmationCode,e.confirmationCode)}function billingAddress(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/billingAddress.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,n){}function r(e,t,r,n){this.userData=r,this.state=n}return r.$inject=["$scope","$log","userDataService","stateService"],e}function billingInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/billingInput.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,n){}function r(e,t,r,n){this.userData=r,this.state=n}return r.$inject=["$scope","$log","userDataService","stateService"],e}function contactInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/contactInput.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,n){}function r(e,t,r,n){this.userData=r,this.state=n}return r.$inject=["$scope","$log","userDataService","stateService"],e}function frequencySelection(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/frequencySelection.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,n){}function r(e,t){this.frequencies=["month","quarter","year"],this.starts={month:["January","February","March","April","May","June","July","August","September","October","November","December"],quarter:["Winter","Spring","Summer","Fall"],year:["2018","2019","2020"]},this.selectedFrequency="",this.startsIn=""}return r.$inject=["$scope","$log"],e}function productSelection(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/productSelection.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,n){}function r(e,t,r,n){var s=this;s.userData=r,s.state=n.productSelection,s.state.infoBox=n.infoBoxes.flavorDefs,s.orderList=r.order,s.productPrice=1700,s.order=r.tender;var i={id:1,flavor:"",mixflvrCount:0,mixflvrs:{srpec:{id:"srpec",name:"Secret Recipe Pecans",selected:!1,classes:{"list-group-item":!0,active:!1}},sralm:{id:"sralm",name:"Secret Recipe Almonds",selected:!1,classes:{"list-group-item":!0,active:!1}},srcsh:{id:"srcsh",name:"Secret Recipe Cashews",selected:!1,classes:{"list-group-item":!0,active:!1}},srpea:{id:"srpea",name:"Secret Recipe Peanuts",selected:!1,classes:{"list-group-item":!0,active:!1}},cnpec:{id:"cnpec",name:"Cinnamon Pecans",selected:!1,classes:{"list-group-item":!0,active:!1}},cnalm:{id:"cnalm",name:"Cinnamon Almonds",selected:!1,classes:{"list-group-item":!0,active:!1}},drpec:{id:"drpec",name:"Drunken Pecans",selected:!1,classes:{"list-group-item":!0,active:!1}}},mixFlvrsSelected:[],mix:""};function o(){s.order.total=s.orderList.length*s.productPrice-s.order.discounts,4==s.orderList.length&&(s.order.total=s.order.total-s.productPrice)}s.flavors=[{name:"Secret Recipe Pecans",description:"Sweet and Salty"},{name:"Secret Recipe Almonds",description:"Sweet and Salty"},{name:"Secret Recipe Cashews",description:"Sweet and Salty"},{name:"Secret Recipe Peanuts",description:"Sweet and Salty"},{name:"Cinnamon Pecans",description:"Bavarian"},{name:"Cinnamon Almonds",description:"Bavarian"},{name:"Drunken Pecans",description:"Savory"},{name:"Mix-It-Up",description:"Whatever You Like"}],s.addAProduct=function(){var e=s.orderList.length;e<4&&s.orderList.push(Object.create(i)),3==e&&(s.state.addAProductBtn.visible=!1),0<e&&(s.state.removeLastProductBtn.visible=!0);for(var t=0;t<=e;t++)s.orderList[t].id=t+1;o()},s.removeLastProduct=function(){var e=s.orderList.length,t=e-1;1<e&&s.orderList.splice(t,1),2==e&&(s.state.removeLastProductBtn.visible=!1),s.state.addAProductBtn.visible=!0,4==e&&(s.order.discounts=0),o()},s.removeAProduct=function(e){var t=e-1;1<s.orderList.length&&s.orderList.splice(t,1);for(var r=0;r<=s.orderList.length-1;r++)s.orderList[r].id=r+1;o()},s.validateProducts=function(){},s.countMixFlavors=function(t){var r=0;return Object.keys(t).forEach(function(e){t[e].selected&&r++}),r},s.updateShoppingCart=function(){console.log("updating shopping cart")},s.buildFlavorList=function(t){s.orderList[t].mixFlvrsSelected=[],Object.keys(s.orderList[t].mixflvrs).forEach(function(e){s.orderList[t].mixflvrs[e].selected&&s.orderList[t].mixFlvrsSelected.push(s.orderList[t].mixflvrs[e].name)})},s.orderList.push(Object.create(i)),o()}return r.$inject=["$scope","$log","userDataService","stateService"],e}function shipDest(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",template:"<div>testing</div>",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,n){}function r(e,t,r){this.zipCheck=r}return r.$inject=["$scope","$log","zipcomplete"],e}function singleAddressInput(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/singleAddressInput.htm",replace:!0,scope:{address:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,n){}function r(e,t,r,n){var s=this;s.userData=r,s.state=n,s.updateBillingAddress=function(){s.state.shipingSameAsBilling&&(s.userData.billingAddress.street=s.userData.shippingDestination.street,s.userData.billingAddress.zip=s.userData.shippingDestination.zip,s.userData.billingAddress.city=s.userData.shippingDestination.city,s.userData.billingAddress.state=s.userData.shippingDestination.state)}}return r.$inject=["$scope","$log","userDataService","stateService"],e}function subTermsCond(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/subTermsCond.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,n){}function r(e,t,r,n,s,i,o,c){this.state=n,this.userData=s,this.validate=i,this.square=c}return r.$inject=["$scope","$log","$location","stateService","userDataService","validationService","submissionService","squareService"],e}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/monthlySub.htm",controller:"mainController",controllerAs:"vm"}).when("/success/:confirmationCode",{templateUrl:"views/success.htm",controller:"successController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function errorHandlingService(){return{}}function modalService(e){var s={backdrop:!0,keyboard:!0,modalFade:!0,templateUrl:"partials/modal.htm"},i={closeButtonText:"Close",actionButtonText:"OK",headerText:"Proceed?",bodyText:"Perform this action?"};this.showModal=function(e,t){return e||(e={}),e.backdrop="static",this.show(e,t)},this.show=function(e,t){var r={},n={};return angular.extend(r,s,e),angular.extend(n,i,t),r.controller||(r.controller=function(e,t){e.modalOptions=n,e.modalOptions.ok=function(e){t.close(e)},e.modalOptions.close=function(e){t.dismiss("cancel")}}),$modal.open(r).result}}function serverService(s){return{chargeCard:function(e,n){return new Promise(function(t,r){s({method:"POST",url:e,headers:{"Content-Type":"application/json"},data:n}).then(function(e){console.log("got this response",e),t(e.data)},function(e){r(e)})})},get:{sqrAppId:function(){return new Promise(function(t,r){s({method:"GET",url:"/api/squareId"}).then(function(e){console.log("got this response",e),t(e.data)},function(e){r(e)})})}}}}function squareService(t,r){var n=this;function s(e){r.card.nonce=e,t.chargeCard("/api/charge_card",r).then(function(e){var t="/success/"+e.data;console.log("got this path back",t)}).catch(function(e){console.log("Error:",e)})}return{_chargeCardWithNonce:s,submitForm:function(){console.log("submitting form"),n.paymentForm.requestCardNonce()},init:function(){t.get.sqrAppId().then(function(e){n.paymentForm=new SqPaymentForm({applicationId:e.id,inputClass:"sq-input",inputStyles:[{fontSize:"14px",padding:"7px 12px",backgroundColor:"transparent"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},callbacks:{cardNonceResponseReceived:function(e,t,r){e?(console.log("Encountered errors:",e),n.card_errors=e,n.isProcessing=!1):(n.card_errors=[],alert("Nonce received: "+t),s(t))},unsupportedBrowserDetected:function(){},inputEventReceived:function(e){e.eventType},paymentFormLoaded:function(){}}}),n.paymentForm.build()}).catch(function(e){$log.info(e)})}}}function stateService(e){return{shipingSameAsBilling:!0,productSelection:{addAProductBtn:{classes:{btn:!0,"btn-success":!0,"btn-warning":!1},visible:!0},removeLastProductBtn:{classes:{btn:!0,"btn-success":!1,"btn-warning":!1,"btn-danger":!0},visible:!1},headerStyle:{color:"rgb(51,51,51)"}},contactInfo:{firstname:{classes:{"form-control":!0,"is-valid":!1,"is-invalid":!1},addressed:!1,isValid:!1,isInvalid:!1}},infoBoxes:{flavorDefs:!1,termsConds:!1},sectionsAddressed:{productSelection:!1,singleShippingAddress:!1,contactInfo:!1,termsConds:!1},sectionsCompleted:{productSelection:!0,singleShippingAddress:!0,contactInfo:!0,termsConds:!1},sectionHeaders:{productSelection:{showError:!1,showCompleted:!1},singleShippingAddress:{showError:!1,showCompleted:!1},contactInfo:{showError:!1,showCompleted:!1},termsConds:{showError:!1,showCompleted:!1}},checkCompletness:function(){var t=this,r=!0;Object.keys(t.sectionsCompleted).forEach(function(e){0==t.sectionsCompleted[e]&&(r=!1)}),t.submissionBtn["btn-secondary"]=r?(readyForSubmission=!0,t.submissionBtn["btn-success"]=!0,!1):(readyForSubmission=!1,t.submissionBtn["btn-success"]=!1,!0)},readyForSubmission:!1,submissionBtn:{btn:!0,"btn-block":!0,"btn-success":!1,"btn-secondary":!0}}}function submissionService(n){this.submit=function(e){return new Promise(function(t,r){n({method:"POST",url:"/subscription-application-submission",headers:{"Content-Type":"application/json"},data:e}).then(function(e){console.log("got this response",e),t(e)},function(e){r(e)})})}}function userDataService(){return{name:{first:"",last:""},contact:{email:"",phone:""},shippingDestination:{street:"",city:"",state:"",zip:""},billingAddress:{street:"",city:"",state:"",zip:""},card:{nonce:""},order:[],tender:{discounts:0,shipping:0,total:0},agreedToTerms:!1}}function validationService(e,t){return{termsAndCond:function(){console.log("validating terms and conditions"),e.sectionsAddressed.termsConds=!0,e.sectionsCompleted.termsConds=t.agreedToTerms,e.sectionsCompleted.termsConds?(e.sectionHeaders.termsConds.showError=!1,e.sectionHeaders.termsConds.showCompleted=!0):(e.sectionHeaders.termsConds.showError=!0,e.sectionHeaders.termsConds.showCompleted=!1)}}}function zipcomplete(){this.handleResp=function(e){e.error_msg?console.log(e.error_msg):"city"in e&&(container.find("input[name='city']").val(e.city),container.find("input[name='state']").val(e.state))},this.checkZip=function(e){var t=e.substring(0,5);5==t.length&&/^[0-9]+$/.test(t)&&console.log("checking zip",t)}}angular.module("ansub").controller("mainController",mainController),mainController.$inject=["$scope","$log","submissionService","userDataService","stateService","squareService"],angular.module("ansub").controller("successController",successController),successController.$inject=["$scope","$log","$routeParams"],angular.module("ansub").directive("billingAddress",billingAddress),angular.module("ansub").directive("billingInput",billingInput),angular.module("ansub").directive("contactInput",contactInput),angular.module("ansub").directive("frequencySelection",frequencySelection),angular.module("ansub").directive("productSelection",productSelection),angular.module("ansub").directive("shipDest",shipDest),angular.module("ansub").directive("singleAddressInput",singleAddressInput),angular.module("ansub").directive("subTermsCond",subTermsCond),angular.module("ansub").config(config),angular.module("ansub").service("errorHandlingService",errorHandlingService),errorHandlingService.$inject=[],angular.module("ansub").service("modalService",modalService),modalService.$inject=["$uibModal"],angular.module("ansub").service("serverService",serverService),serverService.$inject=["$http"],angular.module("ansub").service("squareService",squareService),squareService.$inject=["serverService","userDataService"],angular.module("ansub").service("stateService",stateService),stateService.$inject=["userDataService"],angular.module("ansub").service("submissionService",submissionService),submissionService.$inject=["$http"],angular.module("ansub").service("userDataService",userDataService),userDataService.$inject=[],angular.module("ansub").service("validationService",validationService),validationService.$inject=["stateService","userDataService"],angular.module("ansub").service("zipcomplete",zipcomplete),zipcomplete.$inject=[];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
